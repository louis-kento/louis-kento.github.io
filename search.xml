<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jupyter notebook 安装字体解决可视化时字体不显示</title>
    <url>/2024/06/02/jupyter-notebook-%E5%AE%89%E8%A3%85%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%86%E5%8C%96%E6%97%B6%E5%AD%97%E4%BD%93%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p> jupyter notebook 安装中文字体解决可视化时部分字体不显示或者错位</p>
<span id="more"></span>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (12.0, 8.0) <span class="comment"># 调整大小，可根据自实际情况进行设置</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.interpolation&#x27;</span>] = <span class="string">&#x27;nearest&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;image.cmap&#x27;</span>] = <span class="string">&#x27;gray&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 下面这两个是设置乱码的</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=False</span><br><span class="line">plt.style.use(<span class="string">&#x27;ggplot&#x27;</span>)  <span class="comment"># 使用&#x27;ggplot&#x27;风格美化显示的图表</span></span><br></pre></td></tr></table></figure>

<p>jupyter中的中文字体显示框框，解决方案：</p>
<p>1、下载simhei.ttf字体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://d.xiazaiziti.com/en_fonts/fonts/s/SimHei.ttf</span><br></pre></td></tr></table></figure>

<p>2、将字体放到合适的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp SimHei.ttf /usr/share/fonts/</span><br></pre></td></tr></table></figure>

<p>3、删除matplotlib缓存 – 在jupyter中编辑<br>查看缓存文件在哪里</p>
<p><img src="/2024/06/02/jupyter-notebook-%E5%AE%89%E8%A3%85%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%86%E5%8C%96%E6%97%B6%E5%AD%97%E4%BD%93%E4%B8%8D%E6%98%BE%E7%A4%BA/image-20240602134946681.png" alt="image-20240602134946681"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/louis/.cache/matplotlib</span><br><span class="line">rm *</span><br></pre></td></tr></table></figure>

<p>4.修改matplotlib的配置– 在jupyter中编辑</p>
<p><img src="/2024/06/02/jupyter-notebook-%E5%AE%89%E8%A3%85%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E5%8F%AF%E8%A7%86%E5%8C%96%E6%97%B6%E5%AD%97%E4%BD%93%E4%B8%8D%E6%98%BE%E7%A4%BA/image-20240602135342971.png" alt="image-20240602135342971"></p>
<p>到终端，编辑该文件matplotlibrc，添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font.family:sans-serif</span><br><span class="line">font.sans-serif:SimHei</span><br><span class="line">axes.unicode_minus:False</span><br></pre></td></tr></table></figure>


<p>5.jupyter重启服务</p>
]]></content>
      <tags>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>SNP数据计算距离矩阵</title>
    <url>/2024/06/16/SNP%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97%E8%B7%9D%E7%A6%BB%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<p>用到的工具是 <strong>VCF2Dis</strong></p>
<p>工具对应的github主页 <a href="https://github.com/BGI-shenzhen/VCF2Dis">https://github.com/BGI-shenzhen/VCF2Dis</a></p>
<p>按照软件主页的帮助文档 下载安装，没有遇到问题</p>
<span id="more"></span>

<h2 id="VCF2Dis（英语：VCF2Dis）"><a href="#VCF2Dis（英语：VCF2Dis）" class="headerlink" title="VCF2Dis（英语：VCF2Dis）"></a>VCF2Dis（英语：VCF2Dis）</h2><p><strong>VCF2Dis：一种新的简单高效的软件，用于计算 p 距离矩阵和基于树的变体调用格式</strong></p>
<h3 id="1）-安装"><a href="#1）-安装" class="headerlink" title="1） 安装"></a>1） 安装</h3><hr>
<p><strong>新版本</strong>将在 <strong><a href="https://github.com/hewm2008/VCF2Dis">hewm2008&#x2F;VCF2Dis</a></strong> 中更新和维护，请点击下方链接下载最新版本</p>
<p><strong><a href="https://github.com/hewm2008/VCF2Dis">hewm2008&#x2F;VCF2Dis</a></strong></p>
<p><strong><a href="https://github.com/hewm2008/VCF2Dis/archive/v1.51.tar.gz">下载</a></strong></p>
<p>只需 [make] 或 [sh make.sh ] 来编译此软件，最终软件可以在 Dir <strong>[bin&#x2F;VCF2Dis]</strong><br>For <strong>linux &#x2F;Unix</strong> 和 <strong>macOS</strong> 中找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf  VCF2DisXXX.tar.gz            # if Link do not work ,Try re-install [zlib]library</span><br><span class="line">cd VCF2DisXXX;                          # [zlib] and copy them to the library Dir</span><br><span class="line">sh make.sh;                             # VCF2Dis-xx/src/include/zlib</span><br><span class="line">./bin/VCF2Dis</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>如果链接失败，请尝试<strong>重新安装</strong>库 <a href="https://zlib.net/">*<strong>zlib*</strong></a><br><strong>注意：</strong>：建议使用 <a href="https://cran.r-project.org/web/packages/ape/index.html">ape</a> 和 <a href="https://www.bioconductor.org/packages/release/bioc/html/ggtree.html">ggtree</a> <a href="https://www.r-project.org/">的 R</a></p>
<h3 id="2）-没有-boostrap-的-nj-tree-示例"><a href="#2）-没有-boostrap-的-nj-tree-示例" class="headerlink" title="2） 没有 boostrap 的 nj-tree 示例"></a>2） 没有 boostrap 的 nj-tree 示例</h3><hr>
<ul>
<li><ol>
<li>参数说明：</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: VCF2Dis -InPut  &lt;in.vcf&gt;  -OutPut  &lt;p_dis.mat&gt;</span><br><span class="line"></span><br><span class="line">	-InPut     &lt;str&gt;     Input one or muti GATK VCF genotype File</span><br><span class="line">	-OutPut    &lt;str&gt;     OutPut Sample p-Distance matrix</span><br><span class="line"></span><br><span class="line">	-InList    &lt;str&gt;     Input GATK muti-chr VCF Path List</span><br><span class="line">	-SubPop    &lt;str&gt;     SubGroup SampleList of VCFFile [ALLsample]</span><br><span class="line">	-Rand      &lt;float&gt;   Probability (0-1] for each site to join Calculation [1]</span><br><span class="line">	-KeepMF              Keep the Middle File diff &amp; Use matrix</span><br><span class="line"></span><br><span class="line">	-help                Show more help [hewm2008 v1.51s]</span><br></pre></td></tr></table></figure>



<ul>
<li><ol>
<li>创建p_distance矩阵并构造 nj-tree newick 树</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 2.1) To new all the sample p_distance matrix and newick tree based VCF, run VCF2Dis directly</span><br><span class="line">      ./bin/VCF2Dis	-InPut	in.vcf.gz	-OutPut p_dis.mat</span><br><span class="line">      #  ./bin/VCF2Dis     -InPut  in.fa.gz	-OutPut p_dis.mat -InFormat  FA</span><br><span class="line"></span><br><span class="line"># 2.2) To new sub group sample p_distance matrix and and newick tree ; put their sample name into File sample.list</span><br><span class="line">      ./bin/VCF2Dis	-InPut	chr1.vcf.gz chr2.vcf.gz	-OutPut p_dis.mat  -SubPop  sample.list</span><br></pre></td></tr></table></figure>



<ul>
<li><ol>
<li>可视化和美化它（需要处理其他软件），<br>您将在 VCF2Dis 之后获得 p_dis.nwk 树文件。<br>运行 MEGA # <a href="http://www.megasoftware.net/">MEGA</a> 用于显示基于此文件的系统发育树 [p_dis.nwk]<br>，您可以看到相邻连接树并将其保存为 PDF 格式</li>
</ol>
</li>
</ul>
<p>如果无法获取 <strong>p_dis.nwk</strong> 树文件，以下是获取树文件的 3 种方法。</p>
<h4 id="其他构建-nj-tree-的方法：方法-1-在线"><a href="#其他构建-nj-tree-的方法：方法-1-在线" class="headerlink" title="其他构建 nj-tree 的方法：方法 1 在线"></a>其他构建 nj-tree 的方法：方法 1 在线</h4><p>选择 <strong>A&#x2F;B</strong><br><strong>A 之一。</strong> 上传 web <a href="http://emboss.toulouse.inra.fr/cgi-bin/emboss/fneighbor?_pref_hide_optional=1">fneighbor（http://emboss.toulouse.inra.fr/cgi-bin/emboss/fneighbor?_pref_hide_optional&#x3D;1），</a>单击 <strong>Run fneighbor</strong> 底部。那么你可以得到输出文件<strong>datafile.tree文件</strong><br><strong>B.<strong>将</strong>p_dis.mat</strong>上传到<a href="http://www.atgc-montpellier.fr/fastme/">fastme（http://www.atgc-montpellier.fr/fastme/）</a>网站，选择<strong>数据类型</strong>到<strong>距离矩阵</strong>，点击底部的捻<strong>线执行&amp;email结果</strong>。您将获得 <strong>p_dis_mat_fastme-tree.nwk</strong> ，并且电子邮件不是强制性的;</p>
<p>运行 MEGA # MEGA （<a href="http://www.megasoftware.net/%EF%BC%89">http://www.megasoftware.net/）</a> 用于显示基于此文件的系统发育树 [p_dis_mat_fastme-tree.nwk]</p>
<h4 id="其他构造-nj-tree-的方法-：-方法-2-：-PHYLIPNEW"><a href="#其他构造-nj-tree-的方法-：-方法-2-：-PHYLIPNEW" class="headerlink" title="其他构造 nj-tree 的方法 ： 方法 2 ： PHYLIPNEW"></a>其他构造 nj-tree 的方法 ： 方法 2 ： PHYLIPNEW</h4><p>使用 PHYLIPNEW 构建 nj-tree<br>如何安装 PHYLIPNEW 请 点击**<a href="https://github.com/hewm2008/VCF2Dis/blob/main/Install.NJ.en.md">这里</a>** 或 点击**<a href="https://github.com/hewm2008/VCF2Dis/blob/main/Install.NJ.cn.md">这里（中文）</a>**</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#    3.1 Run  PHYLIP</span><br><span class="line">#   After p_distance done , software PHYLIPNEW 3.69 (http://evolution.genetics.washington.edu/phylip.html) ,with neighbor-joining method can was used to construct the phylogenetic tree on the basis of this  p_distance matrix;</span><br><span class="line"> </span><br><span class="line">     PHYLIPNEW-3.69.650/bin/fneighbor  -datafile p_dis.matrix  -outfile tree.out1.txt -matrixtype s -treetype n -outtreefile tree.out2.tre</span><br><span class="line"></span><br><span class="line">#    3.2 Run  MEGA</span><br><span class="line">#    The MEGA6 (http://www.megasoftware.net/) was used to present the phylogenetic tree based this file [tree.out2.tre]</span><br></pre></td></tr></table></figure>



<h4 id="其他构造-nj-tree-的方法：方法-3-R-脚本"><a href="#其他构造-nj-tree-的方法：方法-3-R-脚本" class="headerlink" title="其他构造 nj-tree 的方法：方法 3 R 脚本"></a>其他构造 nj-tree 的方法：方法 3 R 脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    #    3.1 Run  R Rscript</span><br><span class="line">Rscript  exemple/vistreecode.r    p_dis.mat</span><br><span class="line">    #    3.2 Run  MEGA</span><br><span class="line">    #    The MEGA6 (http://www.megasoftware.net/) was used to present the phylogenetic tree based this file [tree.out2.tre]</span><br></pre></td></tr></table></figure>



<ul>
<li><ol>
<li>您可以查看相邻连接树并将其保存为 PDF 格式</li>
</ol>
</li>
</ul>
<h3 id="3）-带有-boostrap-的-nj-tree-示例"><a href="#3）-带有-boostrap-的-nj-tree-示例" class="headerlink" title="3） 带有 boostrap 的 nj-tree 示例"></a>3） 带有 boostrap 的 nj-tree 示例</h3><ul>
<li><ol>
<li>使用回放采样对 nj-tree 进行多运行。 如上所述，使用站点和新的nj树部分。重复 <strong>NN</strong> 时间。X&#x3D;（1,2….NN）;</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/VCF2Dis	-InPut	in.vcf.gz	-OutPut p_dis_X.mat    -Rand     0.25</span><br><span class="line">PHYLIPNEW-3.69.650/bin/fneighbor  -datafile p_dis_X.matrix  -outfile tree.out1_X.txt -matrixtype s -treetype n -outtreefile tree.out2_X.tre </span><br></pre></td></tr></table></figure>



<ul>
<li><ol>
<li>合并所有回放采样 NJ-tree 并构造 boostrap nj-tree。</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat   tree.out2_*.tre   &gt;  ALLtree_merge.tre</span><br><span class="line">PHYLIPNEW-3.69.650/bin/fconsense   -intreefile   ALLtree_merge.tre  -outfile out  -treeprint Y</span><br><span class="line">perl  ./bin/percentageboostrapTree.pl    ALLtree_merge.treefile    NN    Final_boostrap.tre</span><br></pre></td></tr></table></figure>



<ul>
<li><ol>
<li>构建 nj-tree 并呈现它（需要处理其他软件）</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#    The MEGA6 (http://www.megasoftware.net/) was used to present the phylogenetic tree based this file Final_boostrap.tre] </span><br></pre></td></tr></table></figure>



<hr>
<h3 id="4）-引言"><a href="#4）-引言" class="headerlink" title="4） 引言"></a>4） 引言</h3><hr>
<p>要新建p_distance矩阵，请添加 VCF 文件。有关p_distance矩阵的详细信息，请参阅**<a href="https://phylipweb.github.io/phylip/doc/distance.html">此网站。</a>**采用VCF SNPs数据集计算个体间的p距离，按照以下公式计算样本i和样本j的遗传距离：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D_ij=(1/L) * [(sum(d(l)_ij))]</span><br></pre></td></tr></table></figure>




<p>其中 L 是可以识别 SNP 的区域的长度，给定位置 l 处的等位基因是 A&#x2F;C：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d(l)_ij=0.0     if the genotypes of the two individuals were AA and AA;</span><br><span class="line">d(l)_ij=0.5     if the genotypes of the two individuals were AA and AC;</span><br><span class="line">d(l)_ij=0.0     if the genotypes of the two individuals were AC and AC;</span><br><span class="line">d(l)_ij=1.0     if the genotypes of the two individuals were AA and CC;</span><br><span class="line">d(l)_ij=0.0     if the genotypes of the two individuals were CC and CC;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>distance</tag>
      </tags>
  </entry>
  <entry>
    <title>linux锁定后台进程</title>
    <url>/2024/04/29/linux%E9%94%81%E5%AE%9A%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>在 Linux 中，锁定后台进程可以确保该进程在后台运行，即使当前用户退出登录或终端会话结束。这样可以保持进程的持续运行，而不受登录状态或终端连接的影响。</p>
<span id="more"></span>

<h3 id="一、加“-”符号"><a href="#一、加“-”符号" class="headerlink" title="一、加“&amp;”符号"></a>一、加“&amp;”符号</h3><p>如果想让程序在后台运行，执行程序的时候，命令的最后面加“&amp;”符号。</p>
<p>执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./test.py &amp;</span><br></pre></td></tr></table></figure>

<p>查看是否在后台运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux | grep test</span><br></pre></td></tr></table></figure>

<p>后台的程序 需要关闭时，需要kill命令停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill  pid</span><br></pre></td></tr></table></figure>

<p>这种方法，查看运行日志很不方便</p>
<h3 id="二、nohup命令-权限"><a href="#二、nohup命令-权限" class="headerlink" title="二、nohup命令 (权限)"></a>二、nohup命令 (权限)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup python -u test.py &gt; test.log 2&gt;&amp;1 &amp; </span><br></pre></td></tr></table></figure>

<p>日志文件追加到文件中<br>test.log: 运行的日志，或你的文件的输出内容</p>
<p>&amp; 是一个描述符，如果1或2前不加&amp;，会被当成一个普通文件。</p>
<p>1&gt;&amp;2 意思是把标准输出重定向到标准错误.</p>
<p>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出。</p>
<p>&amp;&gt;filename 意思是把标准输出和标准错误输出都重定向到文件filename中</p>
<p>在run.py的目录默认直接生成了nohup.out文件,有些系统无法执行,权限不足时 需要加sudo</p>
<h3 id="三、screen命令"><a href="#三、screen命令" class="headerlink" title="三、screen命令"></a>三、screen命令</h3><p>Screen是一个全屏窗口管理器，</p>
<p>它在多个进程（通常是交互式shell）之间多路传输物理终端。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##### 安装screen</span><br><span class="line">yum install -y screen</span><br><span class="line">apt-get install screen</span><br><span class="line"># 创建一个新的窗口</span><br><span class="line">screen -S test</span><br><span class="line"># 进入窗口后 执行文件</span><br><span class="line">python test.py</span><br><span class="line"># 退出当前窗口</span><br><span class="line">ctrl+a+d   （方法1：保留当前窗口）</span><br><span class="line">screen -d  （方法2：保留当前窗口）</span><br><span class="line">exit       （方法3：退出程序，并关闭窗口）</span><br><span class="line"># 查看窗口</span><br><span class="line">screen -ls</span><br><span class="line"># 重新连接窗口</span><br><span class="line">screen -r id或窗口名称</span><br><span class="line"># 示例：</span><br><span class="line">screen -r test</span><br><span class="line"></span><br><span class="line">#快捷键</span><br><span class="line">Ctrl+a c ：创建窗口</span><br><span class="line">Ctrl+a w ：窗口列表</span><br><span class="line">Ctrl+a n ：下一个窗口</span><br><span class="line">Ctrl+a p ：上一个窗口</span><br><span class="line">Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换</span><br><span class="line">Ctrl+a K(大写) ：关闭当前窗口，并且切换到下一个窗口</span><br><span class="line">exit ：关闭当前窗口，并且切换到下一个窗口</span><br><span class="line">Ctrl+a d ：退出当前终端，返回加载screen前的shell命令状态</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Pid</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Pid</tag>
      </tags>
  </entry>
  <entry>
    <title>R语言绘制组合图</title>
    <url>/2024/06/08/R%E8%AF%AD%E8%A8%80%E7%BB%98%E5%88%B6%E7%BB%84%E5%90%88%E5%9B%BE/</url>
    <content><![CDATA[<p>在用R语言做完图之后要想放在论文里，就需要把不同的图组合起来，尝试过用PPT，以及在Word里，效果都不太好，因此试着在R里组图（它的优势在于调图片清晰度比较方便）</p>
<span id="more"></span>

<p>首先说第一种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#加载包</span><br><span class="line">library(ggpubr) </span><br><span class="line">library(ggplot2) </span><br><span class="line">#组图</span><br><span class="line">figure &lt;- ggarrange(pp1,pp2,pp3, #需要组合的图</span><br><span class="line">                    ncol = 3, nrow = 1)   #ncol是一行放几个，nrow是放几列</span><br><span class="line">figure</span><br><span class="line"></span><br><span class="line">#这个是看要不要给组图加横纵标题什么的。&quot;left&quot;就是加在左边，其他的top,bottom等同理</span><br><span class="line">figure2=annotate_figure(figure,left = text_grob(&quot;Normal nitrogen&quot;,color = &quot;black&quot;,  </span><br><span class="line">                        size = 36,x = 0.5,y=0.5,rot=90))  #rot是旋转的角度</span><br><span class="line">figure2</span><br><span class="line">#这个是导出图片的</span><br><span class="line">ggsave(filename=&quot;merge_Normal.png&quot;,</span><br><span class="line">       figure2,</span><br><span class="line">       width=30,   </span><br><span class="line">       heigh=16.4,   </span><br><span class="line">       dpi = 1000)  #能设置dpi值，越大的话就越清晰，相应的也就越占内存</span><br></pre></td></tr></table></figure>

<p>然后如果图片已经导出了的话，就再导进来改一下格式就好啦，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm(list=ls())  #清一下运行环境，不然图片多容易卡</span><br><span class="line">#导入图片</span><br><span class="line">library(png) </span><br><span class="line">setwd(&quot;D:/WU G.J/共现图/共现网络图片&quot;)  #图片存储路径</span><br><span class="line">#导入图片</span><br><span class="line">img1 &lt;- readPNG(&quot;Pic1.png&quot;)</span><br><span class="line">img2 &lt;- readPNG(&quot;Pic2.png&quot;)</span><br><span class="line">#改格式</span><br><span class="line">p1&lt;-ggplot()+background_image(img1)+theme_void()</span><br><span class="line">p2&lt;-ggplot()+background_image(img2)+theme_void()</span><br><span class="line"></span><br><span class="line">#之后就和上面的一样啦</span><br><span class="line"></span><br><span class="line">figure &lt;- ggarrange(pp1,pp2,pp3, #需要组合的图</span><br><span class="line">                    ncol = 6, nrow = 3)   #ncol是一行放几个，nrow是放几列</span><br><span class="line">figure</span><br><span class="line"></span><br><span class="line">#这个是看要不要给组图加横纵标题什么的。&quot;left&quot;就是加在左边，其他的top,bottom等同理</span><br><span class="line">figure2=annotate_figure(figure,left = text_grob(&quot;Normal nitrogen&quot;,color = &quot;black&quot;,  </span><br><span class="line">                        size = 36,x = 0.5,y=0.5,rot=90))  #rot是旋转的角度</span><br><span class="line">figure2</span><br><span class="line">#这个是导出图片的</span><br><span class="line">ggsave(filename=&quot;merge_Normal.png&quot;,</span><br><span class="line">       figure2,</span><br><span class="line">       width=30,   </span><br><span class="line">       heigh=16.4,   </span><br><span class="line">       dpi = 1000)  #能设置dpi值，越大的话就越清晰，相应的也就越占内存</span><br></pre></td></tr></table></figure>

<p>在做的过程中我觉得比较有趣的一点就是①先组图再加标题还是②先加标题再组图 ，或者③加标题再组图，再加总的标题</p>
<p>总而言之，涉及的代码就是ggarrange函数（作用是组图）和annotate_figure函数(作用是加标题)这两句，灵活反复运用就行了</p>
]]></content>
      <tags>
        <tag>R</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>non-zero-exit报错R</title>
    <url>/2024/04/29/non-zero-exit%E6%8A%A5%E9%94%99R/</url>
    <content><![CDATA[<p>在 R 安装需要软件包时，”non-zero-exit” 错误通常指示程序在执行过程中出现了非零的退出代码。这通常表示程序在某个步骤中遇到了错误或异常情况。回溯安装过程，可以发现non-zero exit status 的问题不止一种，或者说所有的安装失败，都会给出 non-zero exit status 的warning。以下列出几种可能的问题类型，或许可以按照这些办法解决掉安装失败的问题。</p>
<span id="more"></span>

<h2 id="没有编译权限看这里"><a href="#没有编译权限看这里" class="headerlink" title="没有编译权限看这里"></a>没有编译权限看这里</h2><p>有root权限安装c编译器很简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install build-essential</span><br></pre></td></tr></table></figure>

<p>无root权限安装c编译器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install gcc=12 -c conda-forge</span><br><span class="line"></span><br><span class="line">conda install gxx=12 -c conda-forge</span><br></pre></td></tr></table></figure>

<ol>
<li>ERROR: compilation failed for package</li>
</ol>
<p>经常出现在OSX中的一个问题，缺少C++ library 提供的放头文件。解决办法是安装C++或者Xcode Command Line Tools。C++的安装不必说，Xcode Command Line Tools 的安装命令为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>安装Xcode Command Line Tools 就不会在发生 compilation failed for package 的错误了。</p>
<ol start="2">
<li>Error in if (nzchar(SHLIB_LIBADD)) SHLIB_LIBADD else character() :</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">argument is of length zero</span><br></pre></td></tr></table></figure>

<p>参数缺失的报错，找到R安装目录下 R&#x2F;etc 下是否有 Makeconf 这个文件，如果没有则需要重新安装 r-base-core 包，命令为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get install r-base-core</span><br></pre></td></tr></table></figure>

<p>有时候还需要安装较高版本的libtiff，注意32bit的要安装 x86：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libtiff5-dev </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>依赖包&#x2F;动态库缺失</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: dependency ‘scales’ is not available for package ‘pheatmap’</span><br></pre></td></tr></table></figure>

<p>一个的依赖包安装失败，导致其他依赖包安装失败。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Configuration failed because no mysql client library was found.</span><br></pre></td></tr></table></figure>

<p>动态库缺失，在报错信息里找到需要安装的动态库，安装即可。</p>
]]></content>
      <categories>
        <category>Error</category>
        <category>R</category>
      </categories>
      <tags>
        <tag>R</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>one-hot编码</title>
    <url>/2024/04/29/one-hot%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>One-hot 编码是一种将分类变量转换为二进制向量表示的编码方法。它常用于机器学习和数据分析中，特别是在处理分类特征时。在 One-hot 编码中，每个分类变量的每个可能取值都被表示为一个二进制向量的形式。这个二进制向量的长度等于分类变量的取值个数，其中只有一个元素为 1，其余元素都为 0。被编码为 1 的元素对应了分类变量的实际取值，而其他元素表示该分类变量的其他取值。</p>
<span id="more"></span>

<p>例如，假设有一个分类变量 “颜色”，可能取值为 “红色”、”蓝色” 和 “绿色”。使用 One-hot 编码时，可以将 “颜色” 变量转换为三个二进制向量，分别表示 “红色”、”蓝色” 和 “绿色”：</p>
<ul>
<li>红色：[1, 0, 0]</li>
<li>蓝色：[0, 1, 0]</li>
<li>绿色：[0, 0, 1]</li>
</ul>
<p>这样，原来的单个分类变量被转换为了多个二进制向量，每个向量代表一个分类变量取值。One-hot 编码的好处是，它能够在机器学习算法中更好地处理分类变量，避免了隐式的顺序关系，同时提供了更多的有关分类变量之间的信息。</p>
<p>在实际使用中，可以使用编程语言或库来执行 One-hot 编码，例如 Python 中的 sklearn 库的 OneHotEncoder 类。这些工具可以自动将分类变量转换为 One-hot 编码表示，以供后续的机器学习模型使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义碱基与热编码之间的映射关系</span></span><br><span class="line">base_to_hotcode = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 VCF 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;your_file.vcf&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&#x27;#&#x27;</span>):  <span class="comment"># 忽略注释行</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        fields = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        sample_name = fields[<span class="number">9</span>]  <span class="comment"># 假设样本名称在第10列</span></span><br><span class="line">        ref = fields[<span class="number">3</span>]  <span class="comment"># 参考基因组</span></span><br><span class="line">        alt = fields[<span class="number">4</span>]  <span class="comment"># 替代基因组</span></span><br><span class="line">        genotype = fields[<span class="number">8</span>]  <span class="comment"># 位点对应的基因型信息</span></span><br><span class="line">        <span class="keyword">if</span> genotype == <span class="string">&#x27;0/0&#x27;</span>:</span><br><span class="line">            hotcode = base_to_hotcode[ref]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;1/1&#x27;</span>:</span><br><span class="line">            hotcode =```python</span><br><span class="line">            base_to_hotcode[alt]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;0/1&#x27;</span>:</span><br><span class="line">            hotcode = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(base_to_hotcode[ref], base_to_hotcode[alt])]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过无效的基因型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在这里可以根据需要进行进一步操作，如将热编码保存到文件或执行其他处理</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义碱基与热编码之间的映射关系</span></span><br><span class="line">base_to_hotcode = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 VCF 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;your_file.vcf&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取样本ID</span></span><br><span class="line">sample_ids = lines[<span class="number">0</span>].strip().split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">9</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个空的 DataFrame</span></span><br><span class="line">result = pd.DataFrame()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一行数据</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fields = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        genotype = fields[<span class="number">8</span>]  <span class="comment"># 位点对应的基因型信息</span></span><br><span class="line">        ref = fields[<span class="number">3</span>]  <span class="comment"># 参考基因组</span></span><br><span class="line">        alt = fields[<span class="number">4</span>]  <span class="comment"># 替代基因组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> genotype == <span class="string">&#x27;0/0&#x27;</span>:</span><br><span class="line">            hotcode = base_to_hotcode[ref]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;1/1&#x27;</span>:</span><br><span class="line">            hotcode = base_to_hotcode[alt]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;0/1&#x27;</span>:</span><br><span class="line">            hotcode = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(base_to_hotcode[ref], base_to_hotcode[alt])]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过无效的基因型</span></span><br><span class="line"></span><br><span class="line">        hotcode_array = np.array(hotcode)</span><br><span class="line">        data = pd.DataFrame([hotcode_array], columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">        result = result.append(data, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 跳过格式不正确的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将样本ID与独热编码结果合并</span></span><br><span class="line">result.insert(<span class="number">0</span>, <span class="string">&#x27;Sample_ID&#x27;</span>, sample_ids)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果到文件</span></span><br><span class="line">result.to_csv(<span class="string">&#x27;output.txt&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##creat by lx</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义字母与索引的映射关系</span></span><br><span class="line">mapping = &#123;<span class="string">&#x27;0/0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;0/1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;1/1&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义DNA序列列表</span></span><br><span class="line">sequences = [<span class="string">&#x27;0/00/11/1&#x27;</span> * <span class="number">250</span>] * <span class="number">207</span>  <span class="comment"># DNA序列长度为1000bp，共128条序列</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法一：torch.nn.functional.one_hot函数</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"> </span><br><span class="line">onehot_sequences1 = []</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">    index_sequence = [mapping[base] <span class="keyword">for</span> base <span class="keyword">in</span> sequence]</span><br><span class="line">    onehot_sequence = F.one_hot(torch.tensor(index_sequence), num_classes=<span class="number">4</span>).<span class="built_in">float</span>()</span><br><span class="line">    onehot_sequences1.append(onehot_sequence)</span><br><span class="line"> </span><br><span class="line">end_time = time.time()</span><br><span class="line">method1_time = end_time - start_time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法二：torch.eye函数</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"> </span><br><span class="line">onehot_matrix = torch.eye(<span class="number">4</span>)</span><br><span class="line">onehot_sequences2 = []</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">    index_sequence = [mapping[base] <span class="keyword">for</span> base <span class="keyword">in</span> sequence]</span><br><span class="line">    onehot_sequence = onehot_matrix[index_sequence]</span><br><span class="line">    onehot_sequences2.append(onehot_sequence)</span><br><span class="line"> </span><br><span class="line">end_time = time.time()</span><br><span class="line">method2_time = end_time - start_time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法三：numpy进行转换</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"> </span><br><span class="line">onehot_matrix = np.eye(<span class="number">4</span>)</span><br><span class="line">onehot_sequences3 = []</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">    index_sequence = [mapping[base] <span class="keyword">for</span> base <span class="keyword">in</span> sequence]</span><br><span class="line">    onehot_sequence = onehot_matrix[index_sequence]</span><br><span class="line">    onehot_sequences3.append(onehot_sequence)</span><br><span class="line">onehot_sequences3 = torch.from_numpy(np.array(onehot_sequences3)).<span class="built_in">float</span>()</span><br><span class="line">end_time = time.time()</span><br><span class="line">method3_time = end_time - start_time</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Method 1 time:&quot;</span>, method1_time)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Method 2 time:&quot;</span>, method2_time)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Method 3 time:&quot;</span>, method3_time)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nlp</category>
      </categories>
      <tags>
        <tag>Encoding</tag>
      </tags>
  </entry>
  <entry>
    <title>vcftools计算fst选择信号</title>
    <url>/2024/04/28/vcftools%E8%AE%A1%E7%AE%97fst%E9%80%89%E6%8B%A9%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<p>fst（F-statistics）是一种用于选择信号检测的统计方法，用于测量和比较不同群体之间的遗传差异。它可以帮助确定是否存在选择压力导致的遗传变异。通过计算不同群体之间的遗传差异（fst 值）并进行统计检验，fst 方法可以帮助检测到与自然选择相关的遗传变异。这种方法在种群遗传学、进化生物学和生态学研究中得到了广泛应用。</p>
<span id="more"></span>

<p>fst 的选择信号原理如下：</p>
<ol>
<li>遗传差异的衡量：fst 通过计算群体间和群体内的遗传差异来衡量基因组水平上的遗传变异。它使用基因频率或基因型频率作为指标来评估群体间的遗传差异。</li>
<li>群体间遗传差异：fst 使用群体间的遗传差异来测量选择信号。群体间遗传差异是指在不同群体中，相同基因座上基因型或等位基因频率的差异。如果在某个基因座上，不同群体之间的遗传差异显著高于群体内的遗传差异，可能表明该基因座受到选择的影响。</li>
<li>统计计算：fst 的计算通常基于基因频率或基因型频率的方差分析。常用的 fst 计算方法包括 Weir and Cockerham 方法、Hudson’s unbiased estimator 和 AMOVA (Analysis of Molecular Variance) 方法。这些方法使用群体间和群体内的遗传差异来计算 fst 值。</li>
<li>统计显著性检验：计算得到的 fst 值可以与理论空模型进行比较来进行统计显著性检验。常用的检验方法包括置换检验、Bootstrap 方法和模拟方法。</li>
</ol>
<p>在群体遗传学中衡量群体间的遗传分化的程度的指标有许多种，较为常见的就是遗传分化指数（Fst），fst是由F统计量演变而来，F统计量主要有三种（FIS，FIF，FST）。Fst是针对一对等位基因，如果基因座上存在复等位基因，则需要用Gst衡量，基因差异分化系数（gene differentiation coefficient，Gst）。假定有s个地方群体，第k个地方群体相对大小为wk，第k个地方群体中第i个等位基因频率为qk(i)，杂合体频率观察值为hk，那么整个群体中观察到的杂合体频率平均值HI，地方群体为理想群体的期望杂合体频率平均值HS，整个群体为理想群体的期望杂合体频率HT，分别为：</p>
<p>FIS，是HI相对于HS减少量的比值，即地方群体的平均近交系数。<br>FST，是HS相对于HT减少量的比值，即有亲缘关系地方群体间的平均近交系数。<br>FIT，是HI相对于HT减少量的比值，即整个群体的平均近交系数。<br>Fst值的取值范围是【0,1】，最大值为1表明两个群体完全分化，最小值为0表明群体间无分化。</p>
<p>在实际的研究中Fst值为0–0.05时说明群体间遗传分化很小，可以不做考虑；<br>0.05–0.15时，表明群体间存在中等程度的遗传分化；<br>0.15–0.25时群体间存在较大的遗传分化；<br>0.25以上的时候群体间就存在很大的遗传分化了。</p>
<p>目前主要使用的是vcftools来计算：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda install -c bioconda vcftools</span><br><span class="line"><span class="comment">#单点计算</span></span><br><span class="line">vcftools --vcf test.vcf --weir-fst-pop popa.txt --weir-fst-pop popb.txt --out a_b.fst</span><br><span class="line"><span class="comment">#窗口计算</span></span><br><span class="line">vcftools --vcf test.vcf --weir-fst-pop popa.txt --weir-fst-pop popa.txt --out a_b.fst --fst-window-size 150000</span><br><span class="line"><span class="comment">#滑动窗口计算</span></span><br><span class="line">vcftools --vcf test.vcf --weir-fst-pop popa.txt --weir-fst-pop popa.txt --out a_b.fst --fst-window-size 150000 --fst-window-step 75000</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a><strong>计算</strong></h2><h3 id="1群体较少"><a href="#1群体较少" class="headerlink" title="1群体较少"></a>1<strong>群体较少</strong></h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line"><span class="comment">#crate by lx</span></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">[</span> <span class="operator">$</span><span class="comment"># -ne 6 ]; then</span></span><br><span class="line"> echo <span class="string">&quot;error.. need args&quot;</span></span><br><span class="line"> echo <span class="string">&quot;command:$0 &lt;VCF&gt; &lt;Pop1&gt; &lt;Pop2&gt; &lt;Win&gt; &lt;Step&gt; &lt;Out&gt;&quot;</span></span><br><span class="line"> exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">VCF<span class="operator">=</span><span class="operator">$</span><span class="number">1</span></span><br><span class="line">Pop1<span class="operator">=</span><span class="operator">$</span><span class="number">2</span></span><br><span class="line">Pop2<span class="operator">=</span><span class="operator">$</span><span class="number">3</span></span><br><span class="line">Win<span class="operator">=</span><span class="operator">$</span><span class="number">4</span></span><br><span class="line">Step<span class="operator">=</span><span class="operator">$</span><span class="number">5</span></span><br><span class="line">Out<span class="operator">=</span><span class="operator">$</span><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">[[</span> <span class="string">&quot;$&#123;file##*.&#125;&quot;</span> <span class="operator">=</span> <span class="string">&quot;vcf.gz&quot;</span> <span class="punctuation">]</span><span class="punctuation">]</span>; then</span><br><span class="line">  vcftools <span class="operator">-</span><span class="operator">-</span>gzvcf <span class="operator">$</span><span class="punctuation">&#123;</span>VCF<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop1<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop2<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>size <span class="operator">$</span><span class="punctuation">&#123;</span>Win<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>step <span class="operator">$</span><span class="punctuation">&#123;</span>Step<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>out <span class="operator">$</span><span class="punctuation">&#123;</span>Out<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span><span class="built_in">max</span><span class="operator">-</span><span class="built_in">missing</span> <span class="number">0.9</span> <span class="operator">-</span><span class="operator">-</span>maf <span class="number">0.05</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  vcftools <span class="operator">-</span><span class="operator">-</span>vcf <span class="operator">$</span><span class="punctuation">&#123;</span>VCF<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop1<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop2<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>size <span class="operator">$</span><span class="punctuation">&#123;</span>Win<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>step <span class="operator">$</span><span class="punctuation">&#123;</span>Step<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>out <span class="operator">$</span><span class="punctuation">&#123;</span>Out<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span><span class="built_in">max</span><span class="operator">-</span><span class="built_in">missing</span> <span class="number">0.9</span> <span class="operator">-</span><span class="operator">-</span>maf <span class="number">0.05</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="2流水线"><a href="#2流水线" class="headerlink" title="2流水线"></a>2<strong>流水线</strong></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#crate by lx</span></span><br><span class="line">vcf_file=<span class="string">&quot;/home/liuxiao/1254/miss0.8.recode.vcf&quot;</span></span><br><span class="line">hu_file=<span class="string">&quot;/home/liuxiao/1254/group/group/txt/Hu.txt&quot;</span></span><br><span class="line">group_folder=<span class="string">&quot;/home/liuxiao/1254/group/group/txt/&quot;</span></span><br><span class="line">out_folder=<span class="string">&#x27;/home/liuxiao/1254/result/fst_snp/&#x27;</span></span><br><span class="line"></span><br><span class="line">txt_files=$(<span class="built_in">ls</span> <span class="string">&quot;<span class="variable">$group_folder</span>&quot;</span>/*.txt | grep -v <span class="string">&quot;Hu.txt&quot;</span>)</span><br><span class="line">pids=()</span><br><span class="line"><span class="keyword">for</span> hu_group_file <span class="keyword">in</span> <span class="variable">$hu_file</span>; <span class="keyword">do</span></span><br><span class="line">  hu_group_name=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$hu_group_file</span>&quot;</span> .txt)</span><br><span class="line">  <span class="keyword">for</span> txt_file <span class="keyword">in</span> <span class="variable">$txt_files</span>; <span class="keyword">do</span></span><br><span class="line">    group_name=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$txt_file</span>&quot;</span> .txt)</span><br><span class="line">    output_file=<span class="string">&quot;<span class="variable">$&#123;hu_group_name&#125;</span>_<span class="variable">$&#123;group_name&#125;</span>_8miss.fst&quot;</span></span><br><span class="line">    vcftools --vcf <span class="string">&quot;<span class="variable">$vcf_file</span>&quot;</span> --weir-fst-pop <span class="string">&quot;<span class="variable">$hu_group_file</span>&quot;</span> --weir-fst-pop <span class="string">&quot;<span class="variable">$txt_file</span>&quot;</span> --out <span class="string">&quot;<span class="variable">$out_folder</span>/<span class="variable">$output_file</span>&quot;</span>  &amp;</span><br><span class="line">    pids+=($!)</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;pids[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">wait</span> <span class="string">&quot;<span class="variable">$pid</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有计算完成&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Genome</category>
        <category>Selection_signature</category>
      </categories>
      <tags>
        <tag>Vcftools</tag>
        <tag>Fst</tag>
      </tags>
  </entry>
  <entry>
    <title>wdl学习心得</title>
    <url>/2024/05/23/wdl%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h3 id="WDL官网简介："><a href="#WDL官网简介：" class="headerlink" title="WDL官网简介："></a>WDL官网简介：</h3><p>工作流描述语言（WDL）是一种开放标准，用于以人类可读可写的语法描述数据处理工作流。WDL 可以直接定义分析任务，在工作流中将它们连接起来，并并行执行。该语言力求让所有用户（包括程序员、分析师和生产系统的操作员）都能理解和使用。这种语言可以简单地表达常见的模式，如分散收集和条件执行。WDL 专为可移植性而设计，有多种实现方式可供选择，可在包括 HPC 系统和云平台在内的各种环境中运行。</p>
<span id="more"></span>

<hr>
<p>WDL主要有5个核心组件，WDL不是顺序执行的，所以workflow、task、call在脚本内的排列顺序并不重要。</p>
<table>
<thead>
<tr>
<th>组件</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>workflow</td>
<td>定义了整个工作流程，类似于main</td>
</tr>
<tr>
<td>task</td>
<td>定义了单独的每个子任务，位于workflow模块外部，类似于函数</td>
</tr>
<tr>
<td>call</td>
<td>位于workflow模块内部，表示执行一个特定的函数（task）</td>
</tr>
<tr>
<td>command</td>
<td>字面意思</td>
</tr>
<tr>
<td>output</td>
<td>字面意思</td>
</tr>
</tbody></table>
<h3 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h3><h4 id="task"><a href="#task" class="headerlink" title="task:"></a>task:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task my_task &#123;</span><br><span class="line">  String input_file</span><br><span class="line">  String output_file</span><br><span class="line"></span><br><span class="line">  command &#123;</span><br><span class="line">    cat $&#123;input_file&#125; &gt; $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File output = $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workflow my_workflow &#123;</span><br><span class="line">  input &#123;</span><br><span class="line">    File input_file</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call my_task &#123;</span><br><span class="line">    input: input_file = input_file</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File output_file = my_task.output</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整的例子："><a href="#完整的例子：" class="headerlink" title="完整的例子："></a>完整的例子：</h3><h4 id="文件合并："><a href="#文件合并：" class="headerlink" title="文件合并："></a>文件合并：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task merge_files &#123;</span><br><span class="line">  File file1</span><br><span class="line">  File file2</span><br><span class="line">  String output_file</span><br><span class="line"></span><br><span class="line">  command &#123;</span><br><span class="line">    cat $&#123;file1&#125; $&#123;file2&#125; &gt; $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File merged_file = $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workflow merge_workflow &#123;</span><br><span class="line">  input &#123;</span><br><span class="line">    File file1</span><br><span class="line">    File file2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call merge_files &#123;</span><br><span class="line">    input: file1 = file1, file2 = file2, output_file = &quot;merged.txt&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File merged_file = merge_files.merged_file</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="排序例子："><a href="#排序例子：" class="headerlink" title="排序例子："></a>排序例子：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task sort_file &#123;</span><br><span class="line">  File input_file</span><br><span class="line">  String output_file</span><br><span class="line"></span><br><span class="line">  command &#123;</span><br><span class="line">    sort $&#123;input_file&#125; &gt; $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File sorted_file = $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workflow sort_workflow &#123;</span><br><span class="line">  input &#123;</span><br><span class="line">    File input_file</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  call sort_file &#123;</span><br><span class="line">    input: input_file = input_file, output_file = &quot;sorted.txt&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File sorted_file = sort_file.sorted_file</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="条件语句："><a href="#条件语句：" class="headerlink" title="条件语句："></a>条件语句：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task process_file &#123;</span><br><span class="line">  File input_file</span><br><span class="line">  String output_file</span><br><span class="line"></span><br><span class="line">  command &#123;</span><br><span class="line">    # 处理文件</span><br><span class="line">    # ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    File processed_file = $&#123;output_file&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workflow process_files &#123;</span><br><span class="line">  input &#123;</span><br><span class="line">    Array[File] input_files</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scatter (file in input_files) &#123;</span><br><span class="line">    call process_file &#123;</span><br><span class="line">      input: input_file = file, output_file = &quot;$&#123;file&#125;.processed&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output &#123;</span><br><span class="line">    Array[File] processed_files = process_file.processed_file</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wdl</tag>
      </tags>
  </entry>
  <entry>
    <title>win11配置wsl2</title>
    <url>/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/</url>
    <content><![CDATA[<p>写在前面：</p>
<ul>
<li>window的分发很方便，适合做一些简单分析，简单的炼丹</li>
<li>一定要确保是wsl2下面按照linux子系统，wsl2较wsl提升巨大，具体可以百度。</li>
<li>win10和win11都可以使用wsl安装子系统，个人感觉win11的powershell更好用</li>
<li>安装后修改默认mem,swap，修改安装路径（迁移子系统），创建交换目录文件夹</li>
<li>后续配置bashrc、安装conda、安装docker</li>
<li><span id="more"></span></li>
</ul>
<h2 id="1-电脑设置"><a href="#1-电脑设置" class="headerlink" title="1. 电脑设置"></a>1. 电脑设置</h2><h3 id="1-1-虚拟化设置"><a href="#1-1-虚拟化设置" class="headerlink" title="1.1 虚拟化设置"></a>1.1 虚拟化设置</h3><p>确保虚拟化选项开启。这个如果没有开启的话，需要进电脑的BIOS设置里开启，各家平台进bios不一样，常见的有enter、F2、F12等，具体可以搜索下。开启后可以在任务管理器查看</p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501201255575-1715166756505-1-1715171543854-2.png" alt="image-20240501201255575"></p>
<h3 id="1-2-系统设置"><a href="#1-2-系统设置" class="headerlink" title="1.2 系统设置"></a>1.2 系统设置</h3><p>任务栏搜索 <strong>启用或关闭 windows 功能</strong>，开启<strong>Hyper-V</strong>、<strong>适用于Linux的Windows子系统</strong></p>
<p>勾选并确定，Windows11 会自动下载重启<br>​</p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501201628669-1715166756506-2-1715171543854-1.png" alt="image-20240501201628669"></p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501201720393-1715166756506-5-1715171543854-4.png" alt="image-20240501201720393"></p>
<h2 id="2-系统安装（选一个方式安装就可以）"><a href="#2-系统安装（选一个方式安装就可以）" class="headerlink" title="2. 系统安装（选一个方式安装就可以）"></a>2. 系统安装（选一个方式安装就可以）</h2><h3 id="2-1-命令行安装"><a href="#2-1-命令行安装" class="headerlink" title="2.1 命令行安装"></a>2.1 命令行安装</h3><p><strong>命令行</strong>和<strong>微软商店</strong>哪个安装方式都可以，二选一即可。</p>
<p>使用PowerShell，以管理员权限启动，输入下方命令执行：</p>
<p>这个就是下载的是Ubuntu的系统镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置默认wsl2</span></span><br><span class="line">wsl --set-default-version 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否修改wsl版本</span></span><br><span class="line">wsl -l -v <span class="comment">#VERSION显示的2</span></span><br><span class="line">wsl -v <span class="comment">#wsl版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装ubuntu20.04，可以选择22.04等lts长期支持版本，也可选择新版，看个人喜好。</span></span><br><span class="line">wsl --install -d Ubuntu-20.04</span><br></pre></td></tr></table></figure>

<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501202353751-1715166756506-6-1715171543854-3.png" alt="image-20240501202353751"></p>
<h3 id="2-2-微软商店安装"><a href="#2-2-微软商店安装" class="headerlink" title="2.2 微软商店安装"></a>2.2 微软商店安装</h3><p>打开 <a href="https://link.zhihu.com/?target=https://aka.ms/wslstore">Microsoft Store</a>，并选择你偏好的 Linux（ubuntu） 版本。</p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501202900922-1715166756506-3-1715171543855-6.png" alt="image-20240501202900922"></p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501203109317-1715166756506-4-1715171543855-7.png" alt="image-20240501203109317"></p>
<h2 id="3-系统登录"><a href="#3-系统登录" class="headerlink" title="3. 系统登录"></a>3. 系统登录</h2><h3 id="3-1、点击下载内核-WSL-2-Linux-内核-，别光下啊，安装啊！！"><a href="#3-1、点击下载内核-WSL-2-Linux-内核-，别光下啊，安装啊！！" class="headerlink" title="3.1、点击下载内核 **WSL 2 Linux 内核****，别光下啊，安装啊！！"></a>3.1、点击下载内核 **<a href="https://github.com/microsoft/WSL2-Linux-Kernel">WSL 2 Linux 内核</a>****，别光下啊，安装啊！！</h3><h3 id="3-2、安装后powershell执行，查看是否有ubuntu分发版本"><a href="#3-2、安装后powershell执行，查看是否有ubuntu分发版本" class="headerlink" title="3.2、安装后powershell执行，查看是否有ubuntu分发版本"></a>3.2、安装后powershell执行，查看是否有ubuntu分发版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wsl -l -v </span><br><span class="line"><span class="comment">#如果没有可能是你的powershell一直开着，重启一下shell</span></span><br><span class="line">wsl -l -shutdown</span><br><span class="line"><span class="comment">#如果显示有ubuntu分发就可以继续了</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501205933201-1715166756506-10-1715171543854-5.png" alt="image-20240501205933201"></p>
<p>搜索到点进去就可以，这一步因为已安装不展示（我也没有这个页面啊），<strong>一句话：报错事故高发地</strong>，根据个人电脑不一样，报错自行百度或者联系博主咨询。</p>
<hr>
<p>给出一个报错解决思路：如果没有可以跳过</p>
<p>win +x选择终端（管理员），输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>


<p>然后继续在Windows PowerShell（管理员）输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重新设置一下分发及wsl版本</span></span><br><span class="line">wsl --set-version Ubuntu-20.04 2</span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="comment">######如果wsl2还是不行，那你凑合用用wsl1</span></span><br><span class="line">wsl --set-version Ubuntu-20.04 1</span><br></pre></td></tr></table></figure>

<hr>
<p>恭喜你没有报错，你应该可以看到页面:设置用户名啥的</p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/ubuntuinstall-1715166756506-7-1715171543855-9.png" alt="Ubuntu unpacking in the Windows console"></p>
<p>进入系统修改用户密码和su密码：</p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501210939654-1715166756506-8-1715171543855-8.png" alt="image-20240501210939654"></p>
<h3 id="3-3WSL2迁移至其他目录"><a href="#3-3WSL2迁移至其他目录" class="headerlink" title="3.3WSL2迁移至其他目录"></a>3.3<strong>WSL2迁移至其他目录</strong></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止正在运行的wsl</span></span><br><span class="line">wsl --shutdown</span><br><span class="line"><span class="comment">#将需要迁移的Linux，进行导出这个路径是包存放的路径不重要</span></span><br><span class="line">wsl --<span class="built_in">export</span> Ubuntu D:/export.tar</span><br><span class="line"><span class="comment">#导出完成之后，将原有的Linux卸载</span></span><br><span class="line">wsl --unregister Ubuntu</span><br><span class="line"><span class="comment">#然后安装导出的包 PATH不要无脑照抄，这个是你需要安装的路径，要修改成路径执行，不改的话c盘以后顶不住</span></span><br><span class="line">wsl --import Ubuntu PATH D:\export.tar --version 2</span><br></pre></td></tr></table></figure>



<h2 id="4-4-配置一下"><a href="#4-4-配置一下" class="headerlink" title="4.4 配置一下"></a>4.4 配置一下</h2><p>Windows + R 键，输入 %UserProfile% 并运行进入用户文件夹,新建文件 .wslconfig</p>
<p>说人话就是这个路径 C:\Users\username ,username是你计算机的名字</p>
<p>文件内容格式如下，在txt写好另存为这样子：</p>
<p><img src="/2024/05/01/win11%E9%85%8D%E7%BD%AEwsl2/image-20240501205823170-1715166756506-9-1715171543855-10.png" alt="image-20240501205823170"></p>
<p>.wslconfig内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=48GB  <span class="comment"># 限制最大使用内存，这里分配根据你的电脑</span></span><br><span class="line">swap=96GB  <span class="comment"># 限制最大使用虚拟内存，一般为实际的2倍好像，怕程序跑不动可以把你剩余硬盘容量的30%加入</span></span><br><span class="line"><span class="comment">#下面的抄就可以</span></span><br><span class="line">localhostForwarding=<span class="literal">true</span></span><br><span class="line">autoMemoryReclaim=gradual  </span><br><span class="line">networkingMode=mirrored</span><br><span class="line">dnsTunneling=<span class="literal">true</span></span><br><span class="line">firewall=<span class="literal">true</span></span><br><span class="line">autoProxy=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>进入wsl分发的ubuntu换源吧（开启ubuntu之旅）sudo命令要输密码，自己前面设置的哦</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt </span><br><span class="line"><span class="built_in">ls</span> <span class="comment">##查看应该有sources.list</span></span><br><span class="line"><span class="built_in">cp</span> sources.list sources.list.old <span class="comment">#备份一下</span></span><br><span class="line">sudo vim sources.list <span class="comment">#小白按一下i才能输入哦</span></span><br><span class="line"><span class="comment">#小白是不是不知道咋保存退出，先‘ q ’再‘ ：’ 最后‘ wq ’按一下enter</span></span><br><span class="line"><span class="built_in">source</span> ./sources.list <span class="comment">#告诉系统用修改后的</span></span><br><span class="line">sudo apt-get update <span class="comment">#可以看到已经在使用清华大学镜像 更新软件列表</span></span><br><span class="line">sudo apt-get upgrade  <span class="comment">#更新软件</span></span><br></pre></td></tr></table></figure>

<p>清华源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>conda安装建议miniconda</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>

<p>conda换源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim .condarc <span class="comment">#下面那个</span></span><br><span class="line">conda update conda</span><br><span class="line">conda update --all</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>docker安装：点击下载</p>
<p><a href="https://www.docker.com/products/docker-desktop/">Docker Desktop: The #1 Containerization Tool for Developers | Docker</a></p>
<p>这个在windows安装的哈，安装后在settings &gt; resources &gt; WSL INTEGRATION 勾选，选择ubuntu版本应用即可。</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Conda</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl配置jupyter</title>
    <url>/2024/05/21/wsl%E9%85%8D%E7%BD%AEjupyter/</url>
    <content><![CDATA[<p>jupyter安装教程</p>
<span id="more"></span>

<h2 id="1-jupyter-notebook安装"><a href="#1-jupyter-notebook安装" class="headerlink" title="1.jupyter notebook安装"></a>1.jupyter notebook安装</h2><h3 id="1-1-本文档适用的情况"><a href="#1-1-本文档适用的情况" class="headerlink" title="1.1 本文档适用的情况"></a>1.1 本文档适用的情况</h3><p>Windows10环境已安装WSL2下的Ubuntu20.04<br>WSL2<br>Ubuntu20.04</p>
<h3 id="1-2-Jupyternotebook安装流程"><a href="#1-2-Jupyternotebook安装流程" class="headerlink" title="1.2 Jupyternotebook安装流程"></a>1.2 Jupyternotebook安装流程</h3><p>PS：这里推荐安装jupyter notebook而非jupyter lab，</p>
<p>以下为安装步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jupyter notebook</span><br><span class="line"></span><br><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>

<p>这一步会生成一个jupyternotebook的配置文件文件位置在(如果是root用户登录)：’&#x2F;home&#x2F;usrname&#x2F;.jupyter&#x2F;jupyter_notebook_config.py’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter notebook password </span><br></pre></td></tr></table></figure>


<p>复制里面引号的哈希码，那个就是加密后的密码</p>
<p>设置你windows电脑的浏览器能打开jupyternotebook<br>创建软连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -sf /mnt/c/&#x27;Program Files \(x86\)&#x27;/Microsoft/Edge\ Dev/Application/msedge.exe /usr/bin/msedge</span><br></pre></td></tr></table></figure>



<p>test: 终端里直接输入msedge能直接打开你的Windows的EDGE DEV浏览器</p>
<p>vim &#x2F;root&#x2F;.jupyter&#x2F;jupyter_notebook_config.py </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">c.ServerApp.ip = <span class="string">&#x27;&#x27;</span></span><br><span class="line">c.ServerApp.allow_remote_access = True <span class="comment"># 允许远程访问</span></span><br><span class="line">c.ServerApp.allow_root = True <span class="comment"># 允许root用户登录</span></span><br><span class="line">c.ServerApp.notebook_dir = <span class="string">&#x27;/root/Projects&#x27;</span> <span class="comment"># 里面的文件夹可以自定义为自己想要的项目文件夹</span></span><br><span class="line">c.ServerApp.use_redirect_file = False</span><br><span class="line">c.ServerApp.password = <span class="string">&#x27;此处填写3-2-1步骤生成的password&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把Windows的EDGE DEV作为Ubuntu的默认浏览器,找到这行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># c.ServerApp.browser = &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>不取消注释，在下面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import webbrowser</span><br><span class="line">webbrowser.register(&#x27;msedge&#x27;,None,webbrowser.GenericBrowser(&#x27;/usr/bin/msedge&#x27;))</span><br><span class="line">c.NotebookApp.browser=&#x27;msedge&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="2-多虚拟环境下jupyter-notebook的配置"><a href="#2-多虚拟环境下jupyter-notebook的配置" class="headerlink" title="2 多虚拟环境下jupyter notebook的配置"></a>2 多虚拟环境下jupyter notebook的配置</h2><p>在这之前可以进行apt换源，pip换源的操作，详情BING搜一下就可以了。</p>
<p>这里不推荐安装virtualenvwrapper，一切为了降低学习成本，而且安装了jupyter notebook之后也不需要频繁激活虚拟环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line"></span><br><span class="line"># 在/root（这里笔者以root用户登录的）文件夹下新建一个Virtualevs的文件夹用来存放虚拟环境</span><br><span class="line"></span><br><span class="line">mkdir /root/Virtualenvs</span><br><span class="line">cd /root/Virtualenvs</span><br><span class="line"></span><br><span class="line"># 建立虚拟环境名字为‘tensorflow’</span><br><span class="line"></span><br><span class="line">virtualenv -p /usr/bin/python3.8 tensorflow</span><br><span class="line"></span><br><span class="line"># 激活虚拟环境配置jupyter notebook</span><br><span class="line"></span><br><span class="line">source /root/Virtualenvs/tensorflow/bin/avtivate</span><br><span class="line"></span><br><span class="line"># 这里终端应该是类似（tensorflow）...# 这种的形式，就说明进入到了虚拟环境，可以pip list查看一下安装的包，应该是 之后setuptools什么的</span><br><span class="line"></span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --name tensorflow（这里是实际的虚拟环境的名字） --display-name tensorflow（这里是你想要显示的名字）</span><br><span class="line"></span><br><span class="line"># 或下边这句</span><br><span class="line"></span><br><span class="line">python -m ipykernel install --user </span><br><span class="line"></span><br><span class="line"># 再打开jupyter notebook之后就可以在new那里看到新建的虚拟环境了</span><br><span class="line"></span><br><span class="line">jupyter notebook</span><br><span class="line"></span><br><span class="line"># 而且这样之后即使deactivate虚拟环境之后，在基础的那个环境里面打开jupyter notebook之后也可以选择虚拟环境</span><br></pre></td></tr></table></figure>


<p>扩展安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br><span class="line">jupyter contrib nbextension install --user</span><br><span class="line">这之后就可以看到Nbextension，复选框选择哪个就是激活哪个</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>jupyter</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>文献学习2024-BSAlign比对算法</title>
    <url>/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>文献题目：A Library for Nucleotide Sequence Alignment</p>
<p>doi:<a href="https://doi.org/10.1093/gpbjnl/qzae025">https://doi.org/10.1093/gpbjnl/qzae025</a></p>
<p>背景：中国农业科学院深圳农业基因组研究所（岭南现代农业科学与技术广东省实验室深圳分中心）阮珏团队和邵浩靖团队开发了一种DNA比对新技术“BSAlign”，相比较同类并行算法，该算法可更快生成最优比对结果，且准确性更高。相关研究成果以题为“BSAlign: A Library for Nucleotide Sequence Alignment”发表在 基因组蛋白质组与生物信息学报（Genomics, Proteomics &amp; Bioinformatics（GPB））</p>
<span id="more"></span>

<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531185054495.png" alt="image-20240531185054495"></p>
<p>主题：经典的动态规划算法，如史密斯-沃特曼算法和尼德曼-翁施算法，常用于处理序列比对，但由于其时间复杂度呈二次函数式增长，当序列长度增加时，算法的处理时间也随之变长，导致其在处理大规模序列比对时效率低下，严重阻碍了其在大规模序列比对中的应用。目前并行加速比对的最优算法有三种方法：通过增加数据并行度获得加速的条纹法；通过减少计算单元的字节数从而增加并行度的差分法；通过减少整体计算量获得加速的带宽法。然而，目前并没有任何方法可以高效地结合这三种方法，获得更快速的比对算法。研究人员提出了条纹移动法，该算法在带宽环境下实现了高效运算，并开发了主动F循环法，解决了条纹数据在长插入或删除情况下的多次查询问题。这一创新显著提高了比对速度。与现有并行算法相比，BSAlign比对算法的速度提升了2倍，在长序列比对方面，其效率较基于编辑距离的比对算法提高了1.5到4倍。</p>
<hr>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><p>目前加速比对方法：</p>
<ul>
<li>通过增加数据并行度获得加速的条纹法；</li>
<li>通过减少计算单元的字节数从而增加并行度的差分法；</li>
<li>通过减少整体计算量获得加速的带宽法。</li>
</ul>
<p>BSAlign创新点：</p>
<ul>
<li><p>提出了条纹移动法，该算法在带宽环境下实现了高效运算</p>
</li>
<li><p>并开发了主动F循环法，解决了条纹数据在长插入或删除情况下的多次查询问题</p>
</li>
<li><p>速度有优势</p>
<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531213449507.png" alt="image-20240531213449507"></p>
</li>
</ul>
<h3 id="经典算法："><a href="#经典算法：" class="headerlink" title="经典算法："></a>经典算法：</h3><p>Needleman-Wunsch算法和Smith-Waterman算法。他们通过解决 动态规划 (DP) 问题来处理序列比对，其中计算评分矩阵并返回来自具有最大分数的单元的最佳路径。虽然这两种方法在寻找最佳比对结果方面表现出了很强的能力，但它们需要二次方的时间复杂度并且快速退化，尤其是在处理长序列时。（具体参考生物信息学课本讲解，如果没记错两种算法大致是全局和局部的画箭头规划走路，再加上空位罚分之类的）</p>
<h3 id="准确性："><a href="#准确性：" class="headerlink" title="准确性："></a>准确性：</h3><p>相比其他几种算法准确性较高</p>
<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531215701260.png" alt="image-20240531215701260"></p>
<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531215726562.png" alt="image-20240531215726562"></p>
<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531215740916.png" alt="image-20240531215740916"></p>
<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531215906528.png" alt="image-20240531215906528"></p>
<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531215940363.png" alt="image-20240531215940363"></p>
<p><img src="/2024/07/01/%E6%96%87%E7%8C%AE%E5%AD%A6%E4%B9%A02024-BSAlign%E6%AF%94%E5%AF%B9%E7%AE%97%E6%B3%95/image-20240531215954247.png" alt="image-20240531215954247"></p>
<p>单指令多数据（SIMD）：  第一个优化类别是重新设计评分矩阵计算的数据结构，解决相邻单元之间的数据依赖关系，从而消除 DP 算法内循环内的条件分支，SIMD 等并行化技术更加高效。</p>
<p>在该类别的最初 个试验中，Wozniak 提出了一种与次对角线平行存储值 的实现，以消除 个传统实现的内循环中的条件分支，并实现了 2 倍的加速。</p>
<p>在另一项试验中，Rognes 等人。 引入了另一种实现来存储与查询 序列并行的值。与 Wozniak 的实现相比，Rognes 的设计 的一个优点是它只需要为整个参考序列计算一次查询配置文件。然而，缺点是在计算 F 矩阵时，条件分支被放置在内部循环中。</p>
<p>对于最近的工具，例如 BGSA 、SeqAn  和 AnySeq ，单个指令的长度范围从 128 位到 512位。</p>
<h3 id="F-evaluation"><a href="#F-evaluation" class="headerlink" title="F evaluation"></a>F evaluation</h3><p>为了结合 Wozniak  和 Rognes 的优点，Farrar 修复了这些内容，引入与 SIMD 寄存器并行但以条带模式访问的查询序列布局的缺点，该布局仅计算查询配置文件一次 并将条件 F 矩阵评估移至内部之外环形。结果，Farrar 的条纹矢量化成功地加速了 Smith–Waterman 算法 并被许多对准器采用，例如 Burrows–Wheeler Alignment Smith–Waterman (BWA-SW) 、Bowtie2  和条纹史密斯-沃特曼 (SSW) 库 。然而，同一寄存器中的单元并不总是彼此独立的。  Farrar  通过为每个 F 元素添加一个校正循环解决了这个问题，当插入&#x2F;缺失足够长时，该循环可能会迭代多次。</p>
<hr>
<p>下面是github安装使用介绍</p>
<h2 id="bsalign"><a href="#bsalign" class="headerlink" title="bsalign"></a>bsalign</h2><p><a href="https://github.com/ruanjue/bsalign">ruanjue&#x2F;bsalign: Banded Striped DNA Sequence Alignment (github.com)</a></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ruanjue/bsalign.git</span><br><span class="line">cd bsalign</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<h2 id="run-bsalign"><a href="#run-bsalign" class="headerlink" title="run bsalign"></a>run bsalign</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bsalign</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commands:</span><br><span class="line"> align       Pairwise alignment implemented by 8-bit encoded Banded Striped SIMD</span><br><span class="line"> edit        Pairwise alignment using edit distance implemented by 2-bit encoded banded Striped algorithm</span><br><span class="line"> poa         Multiple alignment implemented by 8-bit encoded Banded Striped SIMD Partial Order Alignment</span><br><span class="line"> cat         Concatenate pieces of seqs into one seq by overlaping</span><br></pre></td></tr></table></figure>

<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd example</span><br><span class="line">sh run.sh</span><br></pre></td></tr></table></figure>

<h2 id="Result-Example"><a href="#Result-Example" class="headerlink" title="Result Example"></a>Result Example</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">29.1	75	+	0	75	29.2	76	+	0	76	128	0.934	71	4	0	1</span><br><span class="line">TGTTACTTTTCTTCCCTGCTGTATAAACCC-CAGTTTTAGTCAGTCAGGGAGATGGATTTGAGACTGAGCTCCCAT</span><br><span class="line">||||||*|||||||||||||**||||||||-*||||||||||||||||||||||||||||||||||||||||||||</span><br><span class="line">TGTTACATTTCTTCCCTGCTACATAAACCCTTAGTTTTAGTCAGTCAGGGAGATGGATTTGAGACTGAGCTCCCAT</span><br></pre></td></tr></table></figure>

<h2 id="Result-Format"><a href="#Result-Format" class="headerlink" title="Result Format"></a>Result Format</h2><p>Each result is 4 lines. Line 1 :col1-RefName; col2-RefLength; col3-RefStrand; col4-RefStart; col5-RefEnd; col6-QueryName; col7-QueryLength; col8-QueryStrand; col9-QueryStart; col10-QueryEnd; col11-AlignmentScore; col12-Identity; col13-NumberOfMatch; col14-NumberOfMismatch; col15-NumberOfDeletion; col16-NumberOfInsertion Line 2 :Reference Sequence Line 3 :’|’, ‘*’ and ‘-‘ mean match, mismatch and indel, respectively. Line 4 :Query Sequence</p>
<h2 id="use-bsalign-library"><a href="#use-bsalign-library" class="headerlink" title="use bsalign library"></a>use bsalign library</h2><p>copy bsalign directory into your code <code>cp -r /path/to/bsalign .</code></p>
<h2 id="Pairwise-Alignment-Example"><a href="#Pairwise-Alignment-Example" class="headerlink" title="Pairwise Alignment Example"></a>Pairwise Alignment Example</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;bsalign/bsalign.h&quot;</span><br><span class="line"></span><br><span class="line">int verbose = 0; // be quiet in alignment</span><br><span class="line">b1i mtx[16]; // score matrix, 4 * 4</span><br><span class="line">banded_striped_epi8_seqalign_set_score_matrix(mtx, sc_mat=2, sc_mis=-6); // init score matrix</span><br><span class="line">b1v *memp = adv_init_b1v(1024, 0, WORDSIZE, 0); // it needs a WORDSIZE(16 bytes)-aligned memory block to perform SIMD alignment</span><br><span class="line">u4v *cigars = init_u4v(32); // use to store alignment cigars (SAM-like), or NULL if useless</span><br><span class="line">int bandwidth = 128; // Or 0 if disable banded alignment</span><br><span class="line">// perform pairwise global alignment (8-bits)</span><br><span class="line">seqalign_result_t rs = banded_striped_epi8_seqalign_pairwise((u1i*)qseq, qlen, (u1i*)tseq, tlen, memp, cigars, SEQALIGN_MODE_GLOBAL, bandwidth, mtx, sc_gapo=-3, sc_gape=-2, 0, 0, verbose);</span><br><span class="line">// perform pairwise global edit (2-bits), using edit-distance in alignment, much faster than 8-bits alignment</span><br><span class="line">seqalign_result_t rs = striped_seqedit_pairwise((u1i*)qseq, qlen, (u1i*)tseq, tlen, SEQALIGN_MODE_GLOBAL, bandwidth, memp, cigars, verbose);</span><br><span class="line">// perform pairwise kmer-guided edit (2-bits), it is better for two strange reads, because it infers the outline of alignment by kmer-matching-synteny</span><br><span class="line">seqalign_result_t rs = kmer_striped_seqedit_pairwise(ksize=13, (u1i*)qseq, qlen, (u1i*)tseq, tlen, memp, cigars, verbose);</span><br><span class="line">// print alignment information</span><br><span class="line">fprintf(stdout, &quot;QRY\t%d\t%d\tREF\t%d\t%d\tmat=%d\tmis=%d\tins=%d\tdel=%d\n&quot;, rs.qb, rs.qe, rs.tb, rs.te, rs.mat, rs.mis, rs.ins, rs.del);</span><br><span class="line">char *alnstr[3];</span><br><span class="line">alnstr[0] = malloc(rs.aln + 1);</span><br><span class="line">alnstr[1] = malloc(rs.aln + 1);</span><br><span class="line">alnstr[2] = malloc(rs.aln + 1);</span><br><span class="line">seqalign_cigar2alnstr(qseq, tseq, &amp;rs, cigars, alnstr, rs.aln);</span><br><span class="line">// print alignment string</span><br><span class="line">fprintf(stdout, &quot;%s\n%s\n%s\n&quot;, alnstr[0], alnstr[2], alnstr[1]);</span><br><span class="line">free(alnstr[0]); free(alnstr[1]); free(alnstr[2]);</span><br><span class="line">free_u4v(cigars);</span><br><span class="line">free_b1v(memp);</span><br></pre></td></tr></table></figure>



<h2 id="Multiple-Alignment-Example"><a href="#Multiple-Alignment-Example" class="headerlink" title="Multiple Alignment Example"></a>Multiple Alignment Example</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;bsalign/bspoa.h&quot;</span><br><span class="line"></span><br><span class="line">BSPOAPar par = DEFAULT_BSPOA_PAR; // change par.xxx if you want</span><br><span class="line">BSPOA *g = init_bspoa(par);</span><br><span class="line">beg_bspoa(g); // prepare to accept reads</span><br><span class="line">for(...) push_bspoa(g, (char*)rdseq, (int)rdlen); // push reads one by one</span><br><span class="line">end_bspoa(g); // MSA generated</span><br><span class="line">tidy_msa_bspoa(g); // polish MSA to call more SNVs</span><br><span class="line">call_snvs_bspoa(g); // call SNVs on the polished MSA</span><br><span class="line">// print MSA, linewidth=0 to output each read in a single line</span><br><span class="line">// colorful=1 to output friendly terminal characters, pipe to &#x27;less -S -R&#x27; if no color in your screen</span><br><span class="line">print_msa_bspoa(g, &quot;&lt;MSA_ID&gt;&quot;, 0, 0, linewidth=100, colorful=1, stdout);</span><br><span class="line">print_snvs_bspoa(g, &quot;&lt;MSA_ID&gt;&quot;, stdout);</span><br><span class="line">// Or write binary MSA (no SNVs) to save disk space</span><br><span class="line">dump_binary_msa_bspoa(g, &quot;Welcome to AGIS&quot;, 15, file);</span><br><span class="line">// Load a binary MSA instead of beg/push/end_bspoa, Note: invoke call_snvs_bspoa if you want SNVs</span><br><span class="line">String *metainfo = init_string(32);</span><br><span class="line">load_binary_msa_bspoa(g, file, metainfo);</span><br><span class="line">free_bspoa(g);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>植物表观遗传调控机理与育种应用</title>
    <url>/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>2024年曹晓风院士讲座学习</p>
<p>植物表观遗传调控机理与育种应用</p>
<p>表观遗传研究通常不不受基因序列snp改变调控，分为DNA甲基化、组蛋白翻译修饰、小分子RNA</p>
<span id="more"></span>

<h3 id="1-DNA甲基化"><a href="#1-DNA甲基化" class="headerlink" title="1. DNA甲基化"></a>1. DNA甲基化</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>DNA甲基化是表观遗传调控中最广为人知的一种机制，涉及在DNA分子上添加甲基基团（-CH3）。</p>
<h4 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h4><ul>
<li><strong>甲基化位点</strong>：甲基化通常发生在DNA双链中胞嘧啶（C）和鸟嘌呤（G）相邻的CpG二核苷酸位点上。</li>
<li><strong>甲基转移酶</strong>：DNA甲基转移酶（DNMTs）负责将甲基基团添加到胞嘧啶上，形成5-甲基胞嘧啶。</li>
</ul>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>基因沉默</strong>：甲基化通常与基因沉默相关，甲基化的DNA区域变得不易转录。</li>
<li><strong>基因调控</strong>：参与X染色体失活、基因组印记、发育调控等过程。</li>
</ul>
<h4 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h4><ul>
<li><strong>疾病关联</strong>：异常的DNA甲基化与多种疾病（如癌症、自身免疫疾病、神经疾病）相关。</li>
</ul>
<h3 id="2-组蛋白修饰"><a href="#2-组蛋白修饰" class="headerlink" title="2. 组蛋白修饰"></a>2. 组蛋白修饰</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>组蛋白修饰指的是在组蛋白尾部的特定氨基酸残基上添加或去除化学基团，这些修饰影响染色质结构和基因表达。</p>
<h4 id="常见修饰类型"><a href="#常见修饰类型" class="headerlink" title="常见修饰类型"></a>常见修饰类型</h4><ul>
<li><strong>乙酰化（Acetylation）</strong>：通常发生在赖氨酸（Lys）残基上，由组蛋白乙酰转移酶（HATs）添加，组蛋白去乙酰酶（HDACs）移除。</li>
<li><strong>甲基化（Methylation）</strong>：发生在赖氨酸或精氨酸（Arg）残基上，可以是单甲基、双甲基或三甲基化。</li>
<li><strong>磷酸化（Phosphorylation）</strong>：发生在丝氨酸（Ser）、苏氨酸（Thr）和酪氨酸（Tyr）残基上。</li>
<li><strong>泛素化（Ubiquitination）</strong>：涉及在赖氨酸残基上添加泛素蛋白。</li>
</ul>
<h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>染色质结构调控</strong>：修饰影响染色质的松紧程度，从而调控基因的转录活性。</li>
<li><strong>基因表达</strong>：乙酰化一般与基因激活相关，而甲基化可以与基因激活或抑制相关，具体取决于修饰位置和上下文。</li>
</ul>
<h3 id="3-小分子RNA"><a href="#3-小分子RNA" class="headerlink" title="3. 小分子RNA"></a>3. 小分子RNA</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>小分子RNA是一类非编码RNA，能够调控基因表达，主要包括微小RNA（miRNA）、小干扰RNA（siRNA）和小核RNA（snRNA）。</p>
<h4 id="微小RNA（miRNA）"><a href="#微小RNA（miRNA）" class="headerlink" title="微小RNA（miRNA）"></a>微小RNA（miRNA）</h4><ul>
<li><strong>生成</strong>：miRNA由细胞内的长前体RNA（pri-miRNA）经过酶切加工生成成熟的miRNA。</li>
<li><strong>功能</strong>：通过与目标mRNA结合，诱导mRNA降解或抑制其翻译，从而减少蛋白质表达。</li>
</ul>
<h4 id="小干扰RNA（siRNA）"><a href="#小干扰RNA（siRNA）" class="headerlink" title="小干扰RNA（siRNA）"></a>小干扰RNA（siRNA）</h4><ul>
<li><strong>生成</strong>：siRNA通常由双链RNA（dsRNA）经过酶切生成。</li>
<li><strong>功能</strong>：与mRNA精确互补，通过RNA诱导的沉默复合体（RISC）导致mRNA降解，从而抑制基因表达。</li>
</ul>
<h4 id="小核RNA（snRNA）"><a href="#小核RNA（snRNA）" class="headerlink" title="小核RNA（snRNA）"></a>小核RNA（snRNA）</h4><ul>
<li><strong>功能</strong>：主要参与mRNA的前体RNA（pre-mRNA）剪接过程，调控基因表达。</li>
</ul>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708113319883.png" alt="image-20240708113319883"></p>
<h3 id="核小体和组蛋白"><a href="#核小体和组蛋白" class="headerlink" title="核小体和组蛋白"></a>核小体和组蛋白</h3><p>核小体（nucleosome）是染色质的基本单位，由DNA和组蛋白组成。组蛋白是染色质蛋白质的主要成分，它们帮助DNA在细胞核内高度压缩和有序地包装。</p>
<h4 id="组蛋白的类型"><a href="#组蛋白的类型" class="headerlink" title="组蛋白的类型"></a>组蛋白的类型</h4><p>有五种主要的组蛋白：H1、H2A、H2B、H3和H4。其中，H2A、H2B、H3和H4是核心组蛋白，H1是连接组蛋白。</p>
<ol>
<li>核心组蛋白：<ul>
<li><strong>H2A、H2B、H3和H4</strong>：这四种组蛋白形成八聚体（octamer），即每种组蛋白各有两分子，共八个分子。</li>
</ul>
</li>
<li>连接组蛋白：<ul>
<li><strong>H1</strong>：位于核小体之间的连接DNA区域，帮助进一步压缩染色质。</li>
</ul>
</li>
</ol>
<h4 id="核小体结构"><a href="#核小体结构" class="headerlink" title="核小体结构"></a>核小体结构</h4><p>核小体由一段大约146个碱基对（bp）的DNA和一个组蛋白八聚体组成。具体结构如下：</p>
<ol>
<li><strong>组蛋白八聚体</strong>：<ul>
<li>2个H2A</li>
<li>2个H2B</li>
<li>2个H3</li>
<li>2个H4</li>
</ul>
</li>
<li><strong>DNA</strong>：<ul>
<li>大约146个碱基对的DNA绕组蛋白八聚体缠绕1.65圈，形成核小体核心。</li>
</ul>
</li>
</ol>
<h4 id="染色质的组织结构"><a href="#染色质的组织结构" class="headerlink" title="染色质的组织结构"></a>染色质的组织结构</h4><ul>
<li><strong>“珠子串”结构</strong>：核小体通过连接DNA（linker DNA）连接起来，形成类似于“珠子串”的结构。每个核小体像一颗珠子，连接DNA则像串珠子的线。</li>
<li><strong>高阶结构</strong>：这些“珠子串”进一步折叠和压缩，形成更高阶的染色质结构，如30纳米纤维，最终形成染色体。</li>
</ul>
<h3 id="组蛋白的功能"><a href="#组蛋白的功能" class="headerlink" title="组蛋白的功能"></a>组蛋白的功能</h3><ol>
<li><strong>DNA包装</strong>：组蛋白通过核小体结构帮助DNA高度压缩，使其能够在细胞核内存放。</li>
<li><strong>基因调控</strong>：组蛋白修饰（如甲基化、乙酰化等）可以影响染色质结构和基因表达。</li>
<li><strong>DNA修复</strong>：组蛋白的动态变化在DNA损伤修复过程中起到重要作用。</li>
</ol>
<h3 id="组蛋白修饰"><a href="#组蛋白修饰" class="headerlink" title="组蛋白修饰"></a>组蛋白修饰</h3><p>组蛋白修饰是通过添加或去除化学基团（如甲基、乙酰基、磷酸基等）来调控染色质结构和基因表达的机制。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708113631320.png" alt="image-20240708113631320"></p>
<h3 id="常染色质（Euchromatin）"><a href="#常染色质（Euchromatin）" class="headerlink" title="常染色质（Euchromatin）"></a>常染色质（Euchromatin）</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><ul>
<li><strong>结构</strong>：常染色质是染色质中较松散的一部分，染色质纤维较为展开。</li>
<li><strong>染色特性</strong>：在显微镜下染色较浅，因此得名“常染色质”。</li>
<li><strong>功能</strong>：常染色质通常包含基因活跃区，易于转录。</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol>
<li><strong>基因表达</strong>：常染色质区域包含许多活跃的基因，这些基因通常处于转录活跃状态。</li>
<li><strong>修饰状态</strong>：常染色质区域的组蛋白修饰如乙酰化较多，使染色质更加松散，有利于转录因子和RNA聚合酶的结合。</li>
<li><strong>DNA序列</strong>：常染色质区域的DNA序列通常包含较少的重复序列。</li>
</ol>
<h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>基因转录</strong>：常染色质中松散的结构使DNA更容易被转录因子和RNA聚合酶访问，从而促进基因转录。</li>
<li><strong>基因调控</strong>：常染色质区域中的基因调控序列（如增强子和启动子）也更容易被调控蛋白访问。</li>
</ul>
<h3 id="异染色质（Heterochromatin）"><a href="#异染色质（Heterochromatin）" class="headerlink" title="异染色质（Heterochromatin）"></a>异染色质（Heterochromatin）</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><ul>
<li><strong>结构</strong>：异染色质是染色质中较紧密的一部分，染色质纤维高度压缩。</li>
<li><strong>染色特性</strong>：在显微镜下染色较深，因此得名“异染色质”。</li>
<li><strong>功能</strong>：异染色质通常包含基因不活跃区，转录活动较少。</li>
</ul>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol>
<li><strong>基因表达</strong>：异染色质区域通常包含较少的基因，且这些基因通常处于转录沉默状态。</li>
<li><strong>修饰状态</strong>：异染色质区域的组蛋白修饰如甲基化较多，使染色质更加紧密，限制了转录因子和RNA聚合酶的结合。</li>
<li><strong>DNA序列</strong>：异染色质区域的DNA序列通常包含大量的重复序列和转座子。</li>
</ol>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>异染色质可以进一步分为两种类型：</p>
<ul>
<li><strong>构成性异染色质（Constitutive Heterochromatin）</strong>：这种异染色质在所有细胞中始终存在，通常位于染色体的着丝粒和端粒区域。</li>
<li><strong>可变性异染色质（Facultative Heterochromatin）</strong>：这种异染色质在特定的细胞类型或发育阶段中存在，可以在异染色质和常染色质之间转换。</li>
</ul>
<h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>基因沉默</strong>：异染色质区域通过高度压缩的结构抑制基因的转录活性。</li>
<li><strong>染色体结构</strong>：异染色质有助于维持染色体的稳定性和结构完整性，尤其是在着丝粒和端粒区域。</li>
<li><strong>基因调控</strong>：异染色质参与调控基因表达，特别是在特定的发育阶段或响应环境变化时。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>常染色质和异染色质在结构和功能上具有显著差异。常染色质结构较松散，包含许多活跃的基因，是基因转录的主要区域。而异染色质结构高度压缩，基因表达受到抑制，主要在染色体稳定性和基因调控中发挥作用。这种分化使得细胞能够灵活地调控基因表达，响应不同的生理和环境需求。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708114737819.png" alt="image-20240708114737819"></p>
<p>组蛋白是细胞核中DNA包装成染色质的关键蛋白质，起着调控基因表达和维持基因组稳定性的重要作用。组蛋白通过与DNA结合形成核小体，从而构成染色质的基本单位。</p>
<h3 id="组蛋白的类型-1"><a href="#组蛋白的类型-1" class="headerlink" title="组蛋白的类型"></a>组蛋白的类型</h3><p>主要组蛋白分为以下几类：</p>
<ol>
<li><strong>核心组蛋白</strong>：构成核小体的八聚体，每个核小体由两份H2A、H2B、H3和H4组成。<ul>
<li><strong>H2A</strong></li>
<li><strong>H2B</strong></li>
<li><strong>H3</strong></li>
<li><strong>H4</strong></li>
</ul>
</li>
<li><strong>组蛋白H1</strong>：连接在核小体外部，帮助核小体之间的连接，稳定染色质的高阶结构。</li>
</ol>
<h3 id="组蛋白的结构"><a href="#组蛋白的结构" class="headerlink" title="组蛋白的结构"></a>组蛋白的结构</h3><ul>
<li><strong>核小体</strong>：是染色质的基本单位，由DNA绕核心组蛋白八聚体约147个碱基对形成。</li>
<li><strong>核小体链</strong>：多个核小体沿DNA链排列形成“串珠状”结构。</li>
</ul>
<h3 id="组蛋白的修饰"><a href="#组蛋白的修饰" class="headerlink" title="组蛋白的修饰"></a>组蛋白的修饰</h3><p>组蛋白尾部的氨基酸残基可以进行多种翻译后修饰，这些修饰通过改变染色质结构或招募特定的调控因子来调节基因表达。主要的组蛋白修饰包括：</p>
<ol>
<li><strong>乙酰化（Acetylation）</strong>：<ul>
<li>发生在赖氨酸残基上。</li>
<li>由组蛋白乙酰转移酶（HATs）催化。</li>
<li>作用：通常与基因激活相关，乙酰化会减少组蛋白与DNA的亲和力，使染色质结构松散，促进转录因子和RNA聚合酶的结合。</li>
</ul>
</li>
<li><strong>甲基化（Methylation）</strong>：<ul>
<li>发生在赖氨酸和精氨酸残基上。</li>
<li>由组蛋白甲基转移酶（HMTs）催化。</li>
<li>作用：可以与基因激活或抑制相关，具体取决于甲基化的位置和状态。例如，H3K4me3（H3第4位赖氨酸三甲基化）通常与基因激活相关，而H3K27me3（H3第27位赖氨酸三甲基化）通常与基因沉默相关。</li>
</ul>
</li>
<li><strong>磷酸化（Phosphorylation）</strong>：<ul>
<li>发生在丝氨酸、苏氨酸和酪氨酸残基上。</li>
<li>由蛋白激酶催化。</li>
<li>作用：通常与染色质去凝集和基因激活相关，并在细胞周期调控和DNA损伤修复中发挥重要作用。</li>
</ul>
</li>
<li><strong>泛素化（Ubiquitination）</strong>：<ul>
<li>发生在赖氨酸残基上。</li>
<li>由泛素连接酶催化。</li>
<li>作用：可以标志蛋白质进行降解，也可以调节蛋白质功能和基因表达。例如，H2A的泛素化通常与基因沉默相关，而H2B的泛素化通常与基因激活相关。</li>
</ul>
</li>
<li><strong>ADP核糖化（ADP-ribosylation）</strong>：<ul>
<li>发生在谷氨酸和天冬氨酸残基上。</li>
<li>由ADP核糖转移酶催化。</li>
<li>作用：参与DNA修复和细胞应激反应。</li>
</ul>
</li>
</ol>
<h3 id="组蛋白修饰的作用"><a href="#组蛋白修饰的作用" class="headerlink" title="组蛋白修饰的作用"></a>组蛋白修饰的作用</h3><ol>
<li><strong>调节基因表达</strong>：<ul>
<li>组蛋白修饰可以通过改变染色质结构（如从紧密到松散或反之）直接影响基因的转录活性。</li>
<li>组蛋白修饰可以招募或排斥特定的转录因子、转录共激活因子或转录抑制因子，从而调节基因表达。</li>
</ul>
</li>
<li><strong>维持基因组稳定性</strong>：<ul>
<li>某些组蛋白修饰（如H3K9me3和H3K27me3）与异染色质的形成和维持有关，帮助沉默重复序列和转座子，防止基因组不稳定。</li>
<li>组蛋白修饰在DNA损伤修复过程中发挥重要作用，例如H2AX的磷酸化（γ-H2AX）标志DNA双链断裂部位，招募修复蛋白。</li>
</ul>
</li>
<li><strong>细胞分化和发育</strong>：<ul>
<li>组蛋白修饰在细胞分化和发育过程中起关键作用，调控基因表达谱的变化，确保特定基因在特定时间和特定细胞类型中被正确表达或沉默。</li>
</ul>
</li>
<li><strong>记忆和学习</strong>：<ul>
<li>组蛋白修饰在神经元活动和突触可塑性中发挥重要作用，调节与记忆和学习相关的基因表达。</li>
</ul>
</li>
</ol>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>组蛋白及其修饰在基因表达调控、基因组稳定性维持、细胞分化和发育以及记忆和学习等生物过程中发挥关键作用。理解组蛋白修饰机制对于揭示基因调控网络和开发新的治疗策略具有重要意义。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708115108870.png" alt="image-20240708115108870"></p>
<p>DNA甲基化是基因组中一种重要的表观遗传修饰，涉及将一个甲基基团（-CH₃）添加到DNA分子中的碱基上。具体而言，DNA甲基化通常发生在胞嘧啶（C）碱基的5号碳原子上，形成5-甲基胞嘧啶（5-mC）。这种修饰主要在CpG二核苷酸序列中出现，即胞嘧啶后面紧跟着鸟嘌呤（G）。</p>
<h3 id="甲基化的类型"><a href="#甲基化的类型" class="headerlink" title="甲基化的类型"></a>甲基化的类型</h3><ol>
<li><strong>CpG甲基化</strong>：<ul>
<li><strong>局部甲基化</strong>：局限于特定的CpG岛（通常是基因启动子区域），在这些区域，甲基化会抑制基因表达。</li>
<li><strong>全基因组甲基化</strong>：遍布整个基因组的CpG位点，但多见于基因外的重复序列和转座子区域，有助于基因组稳定性。</li>
</ul>
</li>
<li><strong>非CpG甲基化</strong>：<ul>
<li>常见于胚胎干细胞和某些特定的生物群体中，作用尚不完全明确。</li>
</ul>
</li>
</ol>
<h3 id="甲基化的原理"><a href="#甲基化的原理" class="headerlink" title="甲基化的原理"></a>甲基化的原理</h3><p>DNA甲基化由一类称为DNA甲基转移酶（DNMTs）的酶介导，这些酶包括：</p>
<ul>
<li><strong>DNMT1</strong>：主要负责维持甲基化，即在DNA复制过程中，将母链上的甲基化模式复制到子链上。</li>
<li><strong>DNMT3A和DNMT3B</strong>：主要负责新的甲基化，即在特定的生理或发育过程中，建立新的甲基化模式。</li>
</ul>
<h3 id="甲基化的作用"><a href="#甲基化的作用" class="headerlink" title="甲基化的作用"></a>甲基化的作用</h3><ol>
<li><strong>基因表达调控</strong>：<ul>
<li><strong>抑制基因表达</strong>：甲基化通常发生在基因启动子区域，会阻止转录因子和RNA聚合酶的结合，从而抑制基因转录。</li>
<li><strong>基因沉默</strong>：尤其是在胚胎发育和细胞分化过程中，某些基因需要被沉默以确保正常的发育进程。</li>
</ul>
</li>
<li><strong>基因组稳定性</strong>：<ul>
<li><strong>抑制转座子活动</strong>：转座子是基因组中的可移动元件，甲基化能抑制其活动，防止基因组的不稳定和突变的发生。</li>
<li><strong>重复序列的沉默</strong>：多余的重复序列会被甲基化，以防止其影响基因组的整体结构和功能。</li>
</ul>
</li>
<li><strong>基因组印记</strong>：<ul>
<li><strong>单亲遗传印记</strong>：某些基因在胚胎发育过程中会只从父亲或母亲的一方表达，而另一方则被甲基化沉默，这种现象称为基因组印记。</li>
</ul>
</li>
<li><strong>X染色体失活</strong>：<ul>
<li>在女性哺乳动物中，两个X染色体中的一个会被随机选择并广泛甲基化，导致其失活，以保证X染色体基因剂量的平衡。</li>
</ul>
</li>
</ol>
<h3 id="甲基化与疾病"><a href="#甲基化与疾病" class="headerlink" title="甲基化与疾病"></a>甲基化与疾病</h3><p>异常的DNA甲基化模式与多种疾病相关，包括癌症、神经系统疾病和代谢疾病。例如：</p>
<ul>
<li><strong>癌症</strong>：癌细胞中常见的基因启动子区域的异常甲基化会导致抑癌基因的沉默，从而促进肿瘤的发生和发展。</li>
<li><strong>神经系统疾病</strong>：异常甲基化可能影响神经发育相关基因的表达，导致精神分裂症、自闭症等疾病的发生。</li>
</ul>
<p>总之，DNA甲基化是一个复杂而关键的生物过程，对基因表达调控和基因组稳定性具有重要作用。理解这一过程对于揭示许多生物学机制和疾病的发生机制具有重要意义。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708203908708.png" alt="image-20240708203908708"></p>
<h3 id="组蛋白修饰-1"><a href="#组蛋白修饰-1" class="headerlink" title="组蛋白修饰"></a>组蛋白修饰</h3><h4 id="H3K9me2（Histone-H3-Lysine-9-Dimethylation）"><a href="#H3K9me2（Histone-H3-Lysine-9-Dimethylation）" class="headerlink" title="H3K9me2（Histone H3 Lysine 9 Dimethylation）"></a>H3K9me2（Histone H3 Lysine 9 Dimethylation）</h4><ul>
<li><strong>位置</strong>：发生在组蛋白H3的第9位赖氨酸残基上，形成双甲基化修饰。</li>
<li><strong>功能</strong>：H3K9me2是异染色质的标志，与基因沉默和染色质紧密结构相关。</li>
<li><strong>机制</strong>：H3K9me2吸引染色质重塑复合物和甲基化结合蛋白，促进染色质压缩，抑制转录因子和RNA聚合酶的结合。</li>
<li><strong>作用</strong>：主要在基因组稳定性、转座子抑制和基因沉默中发挥作用。</li>
</ul>
<h4 id="H3K4me3（Histone-H3-Lysine-4-Trimethylation）"><a href="#H3K4me3（Histone-H3-Lysine-4-Trimethylation）" class="headerlink" title="H3K4me3（Histone H3 Lysine 4 Trimethylation）"></a>H3K4me3（Histone H3 Lysine 4 Trimethylation）</h4><ul>
<li><strong>位置</strong>：发生在组蛋白H3的第4位赖氨酸残基上，形成三甲基化修饰。</li>
<li><strong>功能</strong>：H3K4me3是活跃基因转录的标志，通常出现在基因启动子区域。</li>
<li><strong>机制</strong>：H3K4me3促进染色质的开放状态，使转录因子和RNA聚合酶更容易结合启动子区域，激活基因转录。</li>
<li><strong>作用</strong>：在基因激活、发育调控和细胞分化中发挥重要作用。</li>
</ul>
<h4 id="H3K27me3（Histone-H3-Lysine-27-Trimethylation）"><a href="#H3K27me3（Histone-H3-Lysine-27-Trimethylation）" class="headerlink" title="H3K27me3（Histone H3 Lysine 27 Trimethylation）"></a>H3K27me3（Histone H3 Lysine 27 Trimethylation）</h4><ul>
<li><strong>位置</strong>：发生在组蛋白H3的第27位赖氨酸残基上，形成三甲基化修饰。</li>
<li><strong>功能</strong>：H3K27me3是基因沉默的标志，通常出现在基因抑制区域。</li>
<li><strong>机制</strong>：H3K27me3由多梳复合物（Polycomb Repressive Complex 2, PRC2）介导，促进染色质压缩，抑制基因转录。</li>
<li><strong>作用</strong>：在发育过程中的基因调控、细胞命运决定和基因组稳定性中发挥重要作用。</li>
</ul>
<h3 id="DNA甲基化"><a href="#DNA甲基化" class="headerlink" title="DNA甲基化"></a>DNA甲基化</h3><h4 id="mCG（5-Methylcytosine-in-CpG-Context）"><a href="#mCG（5-Methylcytosine-in-CpG-Context）" class="headerlink" title="mCG（5-Methylcytosine in CpG Context）"></a>mCG（5-Methylcytosine in CpG Context）</h4><ul>
<li><strong>位置</strong>：发生在CpG位点上的胞嘧啶（C）上，形成5-甲基胞嘧啶（5mC）。</li>
<li><strong>功能</strong>：mCG是基因沉默的重要标志，通常与抑制基因转录相关。</li>
<li><strong>机制</strong>：DNA甲基转移酶（如DNMT1）将甲基基团添加到CpG位点上，形成mCG。甲基化的CpG岛通常位于基因启动子区域，抑制转录因子的结合，导致基因沉默。</li>
<li><strong>作用</strong>：在基因组印记、X染色体失活和基因调控中发挥重要作用。</li>
</ul>
<h4 id="mCHG（5-Methylcytosine-in-CHG-Context）"><a href="#mCHG（5-Methylcytosine-in-CHG-Context）" class="headerlink" title="mCHG（5-Methylcytosine in CHG Context）"></a>mCHG（5-Methylcytosine in CHG Context）</h4><ul>
<li><strong>位置</strong>：发生在CHG位点（H代表A、C或T）上的胞嘧啶上，形成5-甲基胞嘧啶。</li>
<li><strong>功能</strong>：mCHG通常与异染色质和基因沉默相关。</li>
<li><strong>机制</strong>：由CMT3等DNA甲基转移酶介导，mCHG甲基化与H3K9甲基化相互作用，促进染色质压缩和基因沉默。</li>
<li><strong>作用</strong>：在转座子抑制、基因组稳定性和基因沉默中发挥作用。</li>
</ul>
<h4 id="mCHH（5-Methylcytosine-in-CHH-Context）"><a href="#mCHH（5-Methylcytosine-in-CHH-Context）" class="headerlink" title="mCHH（5-Methylcytosine in CHH Context）"></a>mCHH（5-Methylcytosine in CHH Context）</h4><ul>
<li><strong>位置</strong>：发生在CHH位点（H代表A、C或T）上的胞嘧啶上，形成5-甲基胞嘧啶。</li>
<li><strong>功能</strong>：mCHH通常出现在重复序列和转座子区域，与基因沉默相关。</li>
<li><strong>机制</strong>：由RNA依赖的DNA甲基化途径（RdDM）介导，mCHH甲基化在非对称序列中维持，抑制转座子活性。</li>
<li><strong>作用</strong>：在转座子抑制和基因组稳定性中发挥重要作用。</li>
</ul>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>组蛋白修饰和DNA甲基化是调控基因表达的重要表观遗传机制。H3K9me2、H3K4me3和H3K27me3分别与基因沉默和激活相关，通过调节染色质结构影响基因表达。mCG、mCHG和mCHH甲基化通过不同的机制维持基因组稳定性、抑制转座子和调控基因表达。这些修饰共同作用，确保细胞在发育和应对环境变化时能够灵活调控基因表达。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708221600017.png" alt="image-20240708221600017"></p>
<p>CMT3（Chromomethylase 3）和KYP（Kryptonite）是植物中两个重要的表观遗传调控因子，它们在DNA甲基化和组蛋白甲基化中发挥关键作用，影响基因表达和染色质状态。</p>
<h3 id="CMT3（Chromomethylase-3）"><a href="#CMT3（Chromomethylase-3）" class="headerlink" title="CMT3（Chromomethylase 3）"></a>CMT3（Chromomethylase 3）</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>CMT3是植物中一种特异性的DNA甲基转移酶，主要负责对非CpG位点（CHG序列，其中H代表A、C或T）的DNA进行甲基化。</p>
<h4 id="作用机制"><a href="#作用机制" class="headerlink" title="作用机制"></a>作用机制</h4><ul>
<li><strong>甲基转移酶功能</strong>：CMT3将甲基基团添加到CHG位点上的胞嘧啶（C）上，形成5-甲基胞嘧啶。</li>
<li><strong>维持甲基化</strong>：在DNA复制后，CMT3通过识别新合成链上的半甲基化CHG位点，将其甲基化，维持CHG位点的甲基化状态。</li>
</ul>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul>
<li><strong>基因沉默</strong>：CMT3介导的CHG甲基化通常与基因沉默和转座子抑制相关。</li>
<li><strong>染色质结构</strong>：通过维持CHG甲基化，CMT3在调控染色质的结构和稳定性方面发挥重要作用。</li>
</ul>
<h3 id="KYP（Kryptonite）"><a href="#KYP（Kryptonite）" class="headerlink" title="KYP（Kryptonite）"></a>KYP（Kryptonite）</h3><h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p>KYP（Kryptonite，又称SUVH4）是一种组蛋白甲基转移酶，主要在植物中负责将组蛋白H3的第9位赖氨酸（H3K9）甲基化。</p>
<h4 id="作用机制-1"><a href="#作用机制-1" class="headerlink" title="作用机制"></a>作用机制</h4><ul>
<li><strong>甲基转移酶功能</strong>：KYP将甲基基团添加到组蛋白H3的第9位赖氨酸（H3K9）上，形成单甲基化（H3K9me1）、双甲基化（H3K9me2）或三甲基化（H3K9me3）的修饰。</li>
<li><strong>与DNA甲基化的相互作用</strong>：H3K9的甲基化可以通过直接或间接的机制促进DNA的CHG和CHH甲基化（其中H代表A、C或T）。</li>
</ul>
<h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><ul>
<li><strong>基因沉默</strong>：H3K9甲基化通常与基因沉默相关，是形成异染色质的重要标志之一。</li>
<li><strong>染色质结构</strong>：H3K9甲基化促进染色质的高度压缩，抑制基因转录。</li>
<li><strong>转座子抑制</strong>：通过甲基化H3K9，KYP在抑制转座子的活性和维持基因组稳定性方面起重要作用。</li>
</ul>
<h3 id="交互作用"><a href="#交互作用" class="headerlink" title="交互作用"></a>交互作用</h3><h4 id="CMT3和KYP的协同作用"><a href="#CMT3和KYP的协同作用" class="headerlink" title="CMT3和KYP的协同作用"></a>CMT3和KYP的协同作用</h4><p>CMT3和KYP之间存在协同作用，它们共同参与基因沉默和染色质结构调控：</p>
<ul>
<li><strong>反馈回路</strong>：H3K9甲基化（由KYP介导）和CHG甲基化（由CMT3介导）之间存在反馈回路。H3K9甲基化可以促进CHG位点的甲基化，反之亦然，这种相互作用有助于维持染色质的沉默状态。</li>
<li><strong>染色质沉默</strong>：通过协同作用，CMT3和KYP共同维持异染色质区域的稳定，确保基因沉默和转座子抑制。</li>
</ul>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>CMT3和KYP在植物表观遗传调控中起关键作用。CMT3负责CHG位点的DNA甲基化，KYP则负责H3K9的组蛋白甲基化。它们通过相互作用，共同调控基因表达、染色质结构和转座子活性。这种复杂的调控机制对于植物的基因组稳定性和正常生长发育至关重要。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708221849890.png" alt="image-20240708221849890"></p>
<p>cmt3和kyp在全基因组的转座子甲基化起作用但是在gene上好像有差异，推测gene有去甲基化酶</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708224958690.png" alt="image-20240708224958690"></p>
<p>JHDM（Jumonji C domain-containing histone demethylases）和 JmjC（Jumonji C domain-containing proteins）是两类重要的组蛋白去甲基化酶，它们通过去除组蛋白上的甲基修饰，调控基因表达和染色质结构。</p>
<h3 id="JHDM（Jumonji-domain-containing-histone-demethylases）"><a href="#JHDM（Jumonji-domain-containing-histone-demethylases）" class="headerlink" title="JHDM（Jumonji domain-containing histone demethylases）"></a>JHDM（Jumonji domain-containing histone demethylases）</h3><h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p>JHDM是一类含有Jumonji C (JmjC) 结构域的组蛋白去甲基化酶，能够去除组蛋白上的甲基基团。</p>
<h4 id="作用机制-2"><a href="#作用机制-2" class="headerlink" title="作用机制"></a>作用机制</h4><ul>
<li><strong>去甲基化</strong>：JHDM酶利用2-氧戊二酸（α-KG）和Fe(II)作为辅因子，通过氧化反应去除组蛋白上的甲基基团。</li>
<li><strong>特异性</strong>：不同的JHDM酶针对不同的甲基化赖氨酸残基，如H3K4、H3K9、H3K27、H3K36和H3K79等。</li>
</ul>
<h4 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>基因激活和沉默</strong>：通过去除抑制性或激活性的组蛋白甲基化修饰，JHDM酶可以激活或沉默基因表达。</li>
<li><strong>染色质重塑</strong>：通过调节组蛋白甲基化状态，JHDM酶影响染色质的结构和可及性。</li>
<li><strong>发育和分化</strong>：在细胞分化和发育过程中，JHDM酶通过调控关键基因的表达发挥重要作用。</li>
</ul>
<h3 id="JmjC（Jumonji-C-domain-containing-proteins）"><a href="#JmjC（Jumonji-C-domain-containing-proteins）" class="headerlink" title="JmjC（Jumonji C domain-containing proteins）"></a>JmjC（Jumonji C domain-containing proteins）</h3><h4 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h4><p>JmjC家族蛋白是含有Jumonji C (JmjC) 结构域的蛋白质家族，其中大多数具有组蛋白去甲基化酶活性，但也有一些参与其他表观遗传调控过程。</p>
<h4 id="作用机制-3"><a href="#作用机制-3" class="headerlink" title="作用机制"></a>作用机制</h4><ul>
<li><strong>去甲基化</strong>：与JHDM类似，JmjC家族中的去甲基化酶通过依赖α-KG和Fe(II)的氧化反应去除组蛋白上的甲基基团。</li>
<li><strong>特异性</strong>：不同的JmjC家族成员针对不同的组蛋白甲基化位点，具有高度特异性。</li>
</ul>
<h4 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>基因表达调控</strong>：JmjC家族蛋白通过去除组蛋白甲基化修饰，调节基因的转录活性。</li>
<li><strong>染色质结构调控</strong>：通过改变组蛋白修饰状态，JmjC蛋白影响染色质的开放性和紧密性。</li>
<li><strong>发育和分化</strong>：JmjC蛋白在胚胎发育、细胞命运决定和组织分化中起重要作用。</li>
<li><strong>疾病关联</strong>：一些JmjC家族成员在癌症等疾病中发挥关键作用，其突变或异常表达与肿瘤发生和进展有关。</li>
</ul>
<h3 id="具体成员及作用"><a href="#具体成员及作用" class="headerlink" title="具体成员及作用"></a>具体成员及作用</h3><h4 id="JHDM1-KDM2"><a href="#JHDM1-KDM2" class="headerlink" title="JHDM1 (KDM2)"></a>JHDM1 (KDM2)</h4><ul>
<li><strong>作用</strong>：去除H3K36me2&#x2F;1的甲基化。</li>
<li><strong>功能</strong>：主要在基因抑制和染色质重塑中发挥作用。</li>
</ul>
<h4 id="JHDM2-KDM3"><a href="#JHDM2-KDM3" class="headerlink" title="JHDM2 (KDM3)"></a>JHDM2 (KDM3)</h4><ul>
<li><strong>作用</strong>：去除H3K9me2&#x2F;1的甲基化。</li>
<li><strong>功能</strong>：主要在基因激活和染色质松散中发挥作用。</li>
</ul>
<h4 id="JARID1-KDM5"><a href="#JARID1-KDM5" class="headerlink" title="JARID1 (KDM5)"></a>JARID1 (KDM5)</h4><ul>
<li><strong>作用</strong>：去除H3K4me3&#x2F;2的甲基化。</li>
<li><strong>功能</strong>：在基因抑制和发育过程中发挥重要作用。</li>
</ul>
<h4 id="UTX-KDM6A-and-JMJD3-KDM6B"><a href="#UTX-KDM6A-and-JMJD3-KDM6B" class="headerlink" title="UTX&#x2F;KDM6A and JMJD3&#x2F;KDM6B"></a>UTX&#x2F;KDM6A and JMJD3&#x2F;KDM6B</h4><ul>
<li><strong>作用</strong>：去除H3K27me3的甲基化。</li>
<li><strong>功能</strong>：在基因激活、细胞分化和发育调控中发挥关键作用。</li>
</ul>
<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>JHDM和JmjC家族蛋白通过去除组蛋白上的甲基修饰，调控基因表达和染色质结构。这些去甲基化酶在基因激活和沉默、染色质重塑以及发育和分化过程中发挥重要作用。此外，它们的异常表达或功能失调与多种疾病（如癌症）相关。研究这些酶的作用机制有助于理解表观遗传调控的复杂性，并可能提供新的治疗策略。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708225516758.png" alt="image-20240708225516758"></p>
<p>在拟南芥研究中发现克隆这些酶有很大困难，推测有毒性，在烟草中做过表达，提取后做免疫荧光</p>
<p>通过大量过表达jmj*可以把这一类组蛋白修饰去除</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708230003610.png" alt="image-20240708230003610"></p>
<p>找到相关去甲基化酶</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708230236154.png" alt="image-20240708230236154"></p>
<p>ibm1去甲基化酶</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240708230303822.png" alt="image-20240708230303822"></p>
<p>几种去甲基化酶</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709140328248.png" alt="image-20240709140328248"></p>
<p>jmj14作为h3k4me3去甲基化酶识别结合位点</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709140043379.png" alt="image-20240709140043379"></p>
<p>jmj13作为h3k27me3去甲基化酶结合位点</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709140126424.png" alt="image-20240709140126424"></p>
<p>ref6具有锌脂结构</p>
<p>REF6（RelA-associated inhibitor, also known as Jumonji Domain-Containing Protein 6, JMJD6）是植物中的一个重要去甲基化酶，具有Jumonji C (JmjC) 结构域，参与表观遗传调控，影响基因表达和染色质状态。</p>
<h3 id="REF6（RelA-associated-inhibitor-JMJD6）"><a href="#REF6（RelA-associated-inhibitor-JMJD6）" class="headerlink" title="REF6（RelA-associated inhibitor&#x2F;JMJD6）"></a>REF6（RelA-associated inhibitor&#x2F;JMJD6）</h3><h4 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h4><ul>
<li><strong>名称</strong>：REF6（RelA-associated inhibitor）在阿拉伯芥中的另一个名称是JMJD6（Jumonji Domain-Containing Protein 6）。</li>
<li><strong>结构</strong>：包含JmjC结构域，依赖Fe(II)和2-氧戊二酸（α-KG）作为辅因子的去甲基化酶。</li>
</ul>
<h4 id="作用机制-4"><a href="#作用机制-4" class="headerlink" title="作用机制"></a>作用机制</h4><ul>
<li><strong>去甲基化</strong>：REF6通过依赖Fe(II)和2-氧戊二酸的氧化反应去除组蛋白上的甲基基团。</li>
<li><strong>特异性</strong>：REF6专门识别和去除组蛋白H3的第27位赖氨酸（H3K27me3）上的甲基基团。</li>
<li><strong>靶位点</strong>：REF6能够识别特定的DNA序列，通过结合这些序列来定位和调控特定基因的表达。</li>
</ul>
<h4 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h4><ul>
<li><strong>基因激活</strong>：H3K27me3是基因沉默的标志，REF6通过去除H3K27me3修饰，解除基因沉默，激活基因表达。</li>
<li><strong>发育和分化</strong>：REF6在植物发育和分化过程中起重要作用，通过调控关键基因的表达影响植物的生长和形态建成。</li>
<li><strong>环境响应</strong>：REF6参与植物对环境变化（如光照和温度变化）的响应，通过调控相关基因的表达帮助植物适应环境。</li>
</ul>
<h4 id="研究实例"><a href="#研究实例" class="headerlink" title="研究实例"></a>研究实例</h4><ul>
<li><strong>阿拉伯芥中的研究</strong>：在阿拉伯芥中，REF6被发现通过去甲基化H3K27me3来激活多个基因，包括那些与发育和环境响应相关的基因。</li>
<li><strong>调控网络</strong>：REF6不仅直接去甲基化特定基因的H3K27me3，还与其他表观遗传调控因子相互作用，形成复杂的调控网络，精确调节基因表达。</li>
</ul>
<h4 id="作用机制的具体步骤"><a href="#作用机制的具体步骤" class="headerlink" title="作用机制的具体步骤"></a>作用机制的具体步骤</h4><ol>
<li><strong>结合特定位点</strong>：REF6识别并结合特定的DNA序列，通过这种方式定位到特定基因的启动子区域。</li>
<li><strong>去除甲基基团</strong>：REF6通过其JmjC结构域，利用Fe(II)和2-氧戊二酸，去除组蛋白H3K27me3的甲基基团。</li>
<li><strong>解除基因沉默</strong>：去甲基化后的H3K27使染色质变得更为开放，转录因子和RNA聚合酶能够更容易地结合启动子区域，从而激活基因转录。</li>
</ol>
<h4 id="生物学意义"><a href="#生物学意义" class="headerlink" title="生物学意义"></a>生物学意义</h4><ul>
<li><strong>基因表达调控</strong>：通过去除抑制性修饰，REF6在基因表达调控中起关键作用。</li>
<li><strong>发育调控</strong>：在植物发育过程中，REF6通过精确调控特定基因的表达，促进器官形成和功能实现。</li>
<li><strong>环境适应</strong>：在应对环境变化时，REF6帮助植物调整基因表达模式，提高生存适应能力。</li>
</ul>
<h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>REF6（JMJD6）是一种关键的组蛋白去甲基化酶，专门去除H3K27me3修饰，通过解除基因沉默来激活基因表达。它在植物发育、环境响应和基因调控中发挥重要作用。研究REF6的功能和机制有助于深入了解植物表观遗传调控网络，为植物生物学和农业科学提供重要理论基础。</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709140412484.png" alt="image-20240709140412484"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709140638051.png" alt="image-20240709140638051"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709140852023.png" alt="image-20240709140852023"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709141030910.png" alt="image-20240709141030910"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709141205174.png" alt="image-20240709141205174"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709143025544.png" alt="image-20240709143025544"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144221860.png" alt="image-20240709144221860"></p>
<p>转座子</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144318609.png" alt="image-20240709144318609"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144423540.png" alt="image-20240709144423540"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144435104.png" alt="image-20240709144435104"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144523765.png" alt="image-20240709144523765"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144547716.png" alt="image-20240709144547716"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144604961.png" alt="image-20240709144604961"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144631464.png" alt="image-20240709144631464"></p>
<p>小分子rna</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144651825.png" alt="image-20240709144651825"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144703312.png" alt="image-20240709144703312"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144716097.png" alt="image-20240709144716097"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144738976.png" alt="image-20240709144738976"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144811661.png" alt="image-20240709144811661"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709144904215.png" alt="image-20240709144904215"></p>
<p> <img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145439479.png" alt="image-20240709145439479"></p>
<p>获得性遗传是否存在？</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145546343.png" alt="image-20240709145546343"></p>
<p>水稻迁移与温度降低关系验证</p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145600104.png" alt="image-20240709145600104"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145629625.png" alt="image-20240709145629625"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145723203.png" alt="image-20240709145723203"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145758867.png" alt="image-20240709145758867"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145914157.png" alt="image-20240709145914157"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709145948396.png" alt="image-20240709145948396"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709150019180.png" alt="image-20240709150019180"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709150103388.png" alt="image-20240709150103388"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709150137272.png" alt="image-20240709150137272"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709150205139.png" alt="image-20240709150205139"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709151352130.png" alt="image-20240709151352130"></p>
<p><img src="/2024/07/08/%E6%A4%8D%E7%89%A9%E8%A1%A8%E8%A7%82%E9%81%97%E4%BC%A0%E8%B0%83%E6%8E%A7%E6%9C%BA%E7%90%86%E4%B8%8E%E8%82%B2%E7%A7%8D%E5%BA%94%E7%94%A8/image-20240709151442256.png" alt="image-20240709151442256"></p>
]]></content>
      <tags>
        <tag>表观</tag>
        <tag>植物</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>泛基因组学习-理论1</title>
    <url>/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/</url>
    <content><![CDATA[<p>泛基因组(Pan-genome)即某一物种<strong>全部基因</strong>的总称，这里这个全部基因是有别于个体基因组的基因的。一个个体的基因组是这个物种基因组的代表。因此，以一个基因组为模板的分析不能全面的反应物种基因水平的全部遗传信息，尤其是在研究<strong>同一物种中差异巨大的不同亚种或者变种</strong>，此类特有片段的差异往往要比共有片段中的差异更为重要。分析核心基因和非核心基因的基本情况，并从特有基因序列的角度来研究物种内的差异。</p>
<span id="more"></span>

<h2 id="一、研究内容"><a href="#一、研究内容" class="headerlink" title="一、研究内容"></a>一、研究内容</h2><p>泛基因组产品采用从头组装的策略进行泛基因组构建，分析内容包括比较基因组分析、核心基因和非必需基因分析、结构变异（SVs）分析和图形结构基因组的构建。具体内容如下：<br><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240.webp" alt="image.png"></p>
<h2 id="1-比较基因组分析"><a href="#1-比较基因组分析" class="headerlink" title="1.比较基因组分析"></a>1.比较基因组分析</h2><p>泛基因组包含多个材料的基因组数据，非常适合进行材料间的比较基因组分析，挖掘群体&#x2F;个体材料的特有基因，从而在全基因组水平上了解不同材料间的共性与特性，进而了解其基因组结构、基因功能，探究特有基因与特殊生物学性状的关系，推断物种进化地位及适应性机制。</p>
<p>例如，大豆泛基因组研究[1]中，研究者通过WGD（Whole genome duplication,全基因组复制）分析，发现WGD区域包含较高比例的核心基因和次核心基因，而非WGD区域包含较高比例的非必需基因和特有基因。比较WGD和non-WGD之间的核苷酸多样性，发现WGD区域基因核苷酸多样性显著低于非WGD区域。同时，在非WGD区域发现了更多的SVs，且与非WGD区域相比，WGD区域拥有较少特有SVs。研究结果表明基因组复制可以作为一种重要的遗传力来影响SVs的进化。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100631-1.webp" alt="image"></p>
<blockquote>
<p>图1 大豆WGD与非WGD区域之间的基因和结构变异特征的比较（图片引自文献[1]），A：WGD与非WGD区域之间的基因密度比较。B：WGD和非WGD区域之间重复DNA比例的比较。C：WGD和非WGD区域之间核苷酸多样性的比较。D：WGD和非WGD区域中的基因组成情况。E：WGD和非WGD区域中的结构变化组成情况。F：WGD和非WGD区域之间PAV驱动的单核苷酸突变率比较。</p>
</blockquote>
<ol start="2">
<li><h2 id="核心基因-非必需基因分析"><a href="#核心基因-非必需基因分析" class="headerlink" title="核心基因&#x2F;非必需基因分析"></a>核心基因&#x2F;非必需基因分析</h2></li>
</ol>
<p>泛基因组中的基因分为核心基因和非必需基因，不同类型基因在特征和功能上具有明显差异，通过对不同类型基因集的比较，可以进一步揭示物种的基因组变化和适应性机制。</p>
<h3 id="泛基因组大小模拟"><a href="#泛基因组大小模拟" class="headerlink" title="泛基因组大小模拟"></a>泛基因组大小模拟</h3><p>通过泛基因集的大小模拟（即泛基因和核心基因累计分析），可以预测该物种泛基集的理论大小、挖掘个体特有基因、了解个体基因组成、明确物种核心基因和非必需基因的占比等。</p>
<p>例如，大豆泛基因组研究[1]中，研究者对核心基因和非必需基因数目进行模拟，发现总基因随着新基因组的加入而增加，并在n&#x3D;25时接近平缓，表明这27份大豆材料非常具有代表性，已包含绝大多数的大豆基因信息。此外，短柄草[2]和番茄[3]等泛基因组研究也做了类似的分析。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100631-2.webp" alt="image.png"></p>
<blockquote>
<p>图2 大豆核心基因和非必需基因分析 A：泛基因组和核心基因组中基因家族数目随大豆基因组数目增加的变化情况。B：泛基因组和个体基因组的基因家族组成。（图片引自文献[1]）</p>
</blockquote>
<h3 id="核心基因-非必需基因功能富集"><a href="#核心基因-非必需基因功能富集" class="headerlink" title="核心基因&#x2F;非必需基因功能富集"></a>核心基因&#x2F;非必需基因功能富集</h3><p>通过功能富集分析，可以直观了解不同类型基因集的功能，有助于挖掘影响特殊生物学性状形成的特有基因资源。</p>
<p>例如，大豆泛基因组研究[1]中，Pfam富集分析和GO富集分析显示，核心基因在与生长、免疫、生殖、细胞发生等相关的生物学过程中富集，而非必需和特有基因在生物和非生物胁迫响应过程中富集。KEGG通路分析表明，核心基因富含与基础代谢和次生代谢产物生物合成有关的途径，非必需基因在特定代谢相关的途径富集。</p>
<p>此外，短柄草[2]、番茄[3]、甘蓝[4]等泛基因组研究均有类似发现。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100632-3.webp" alt="image"></p>
<blockquote>
<p>图3 大豆核心基因和非必需基因功能富集分析A：核心和非必需基因的Pfam富集。B：核心和非必需基因的GO分析。C：核心和非必需基因的KEGG分析。（图片引自文献[1]）</p>
</blockquote>
<h3 id="核心基因-非必需基因保守性分析"><a href="#核心基因-非必需基因保守性分析" class="headerlink" title="核心基因&#x2F;非必需基因保守性分析"></a>核心基因&#x2F;非必需基因保守性分析</h3><p>对不同类型基因集进行保守性分析，有助于挖掘适应性进化或驯化中发挥关键作用的基因。</p>
<p>例如，大豆泛基因组研究[1]中，对不同类型的基因进行保守性比较，结果表明含有InterPro结构域的核心基因和次核心基因远远高于非必需基因和特有基因，非必需基因的核苷酸多样性（π）和<em>dN &#x2F; dS</em> （非同义替换率与同义替换率的的比值）均高于核心基因，这些结果表明核心基因比非必需基因在功能上更保守。短柄草泛基因组研究[2]也有类似的发现。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100632-4.webp" alt="image"></p>
<blockquote>
<p>图4 大豆核心基因和非必需基因保守性比较左图：核心基因和非必需基因中具有InterPro结构域的基因比例。中间图及右图：核心基因和非必需基因的核苷酸多样性(π)和dN &#x2F; dS 比较。（图片引自文献[1]）</p>
</blockquote>
<h3 id="核心基因-非必需基因与重复序列相关性分析"><a href="#核心基因-非必需基因与重复序列相关性分析" class="headerlink" title="核心基因&#x2F;非必需基因与重复序列相关性分析"></a>核心基因&#x2F;非必需基因与重复序列相关性分析</h3><p>研究表明，非必需基因更可能在重复序列区域富集。对不同类型基因集所在的重复区域进行统计。</p>
<p>例如，短柄草泛基因组研究[2]中，研究者发现染色体上非必需基因与核心基因的比率与种内TE活性高度相关，在染色体的着丝粒周围区域，非必需基因与核心基因的比率更高。甘蓝泛基因组研究[4]中也有类似的发现，与核心基因相比，非必需基因周围具有较高TE密度。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100632-5.webp" alt="image.png"></p>
<blockquote>
<p>图5 核心基因和非必需基因与重复序列相关性左图：短柄草染色体的着丝粒周围区域，核心基因与非必需基因的分布情况。右图：甘蓝核心和非必需基因TE含量比较。（图片引自文献[2，4]）</p>
</blockquote>
<h3 id="核心基因-非必需基因表达水平分析"><a href="#核心基因-非必需基因表达水平分析" class="headerlink" title="核心基因&#x2F;非必需基因表达水平分析"></a>核心基因&#x2F;非必需基因表达水平分析</h3><p>核心基因与非必需基因功能不同，表达量也有差异。</p>
<p>例如，短柄草泛基因组研究[2]中，研究者发现与非必需基因相比，核心基因通常有更高表达水平，并且在组织中更广泛地表达。番茄泛基因组研究[3]也做有类似的发现。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100632-6.webp" alt="image.png"></p>
<blockquote>
<p>图6 短柄草核心基因和非必需基因表达比较 左图：核心基因与Shell基因的表达水平比较。右图：核心基因在与Shell基因的在多种组织中的表达情况。（图片引自文献[2]）</p>
</blockquote>
<h2 id="3-结构变异分析"><a href="#3-结构变异分析" class="headerlink" title="3.结构变异分析"></a>3.结构变异分析</h2><p>相比于原核生物基因组主要由基因序列组成，真核生物基因组中有超过50%的基因组可能是基因间的，并且基因序列本身还包含内含子。因此，真核生物泛基因组除了要关注基因外，也应该关注序列的变异。根据泛基因组进行结构变异分析，可以深入挖掘重要性状的调控基因，解析表型多样性形成的遗传基础。</p>
<h3 id="SVs特征分析"><a href="#SVs特征分析" class="headerlink" title="SVs特征分析"></a>SVs特征分析</h3><p>基于基因组序列比对进行基因组SVs的检测，可以对SVs特征进行分析，如对SVs类型、长度分布、基因组分布、重复含量进行比较等。番茄结构变异研究[5]中，研究者构建了最全面的pan-SV基因组，并对SVs的特征进行详细分析，结果表明大多数SVs相对较小，SVs通常由转座子和相关重复序列组成或产生。大豆泛基因组研究[1]也有类似内容。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100632-7.webp" alt="image"></p>
<blockquote>
<p>图7 SVs的特征分布左图：番茄不同大小SVs的检测频率分布图及不同类型SVs的长度分布图。右图：番茄不同类型SVs的重复含量分布。（图片引自文献[5]）</p>
</blockquote>
<h3 id="核心-非必需SVs累计分析"><a href="#核心-非必需SVs累计分析" class="headerlink" title="核心&#x2F;非必需SVs累计分析"></a>核心&#x2F;非必需SVs累计分析</h3><p>将所有基因组中整合得到的非冗余SVs，同样基于核心基因和非必须基因类似的策略进行核心和非必需SVs划分和比较。通过核心和非必需SVs累计曲线，可以预测该物种泛基组的理论大小、挖掘个体特有结构变异。</p>
<p>例如，大豆泛基因组研究[1]中，研究者根据SVs的等位基因频率，将SVs分为4类：核心SVs、次核心SVs、非必需SVs或特有SVs。与核心基因和非必需基因的累计分布模式相似，非冗余SVs集随着样本的加入而增长，并且趋于平缓。同时，核心SVs集逐渐减少，最终有130个SVs为所有样本共有。番茄结构变异研究[5]也有类似的SVs累计分布趋势的发现。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100632-8.webp" alt="image"></p>
<blockquote>
<p>图8 核心和非必需SVs累计分析 左图：大豆核心和非必需SVs累计分析。右图：番茄核心和非必需SVs累计分析。（图片引自文献[1，5]）</p>
</blockquote>
<h3 id="图形结构基因组构建"><a href="#图形结构基因组构建" class="headerlink" title="图形结构基因组构建"></a>图形结构基因组构建</h3><p>在基因组从头组装的基础上，把该物种的所有遗传变异的信息都添加到参考基因组中，表示为含有替代路径的图形结构，从而进行图形结构泛基因构建，该泛基因组极大的涵盖了个体间的差异信息，为物种研究提供更全面的遗传信息。例如，大豆泛基因组研究[1]首次采用了图形结构的泛基因组构建方法，打破了传统线性基因组的存储形式，展示了物种更全面的遗传信息，为后续基因组学的其他研究奠定良好的基础。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100633-9.webp" alt="image"></p>
<blockquote>
<p>图9 图形结构基因组构建（图片引自文献[6]）</p>
</blockquote>
<h3 id="SVs对基因结构的影响"><a href="#SVs对基因结构的影响" class="headerlink" title="SVs对基因结构的影响"></a>SVs对基因结构的影响</h3><p>通过泛基因组序列及基因结构分析，不仅可以检测到先前报道的等位基因，而且可以发现新的基因结构变异，包括基因融合。</p>
<p>例如，大豆泛基因组研究[1]发现开花基因E3 基因结构变异导致其自身移码甚至与其他基因融合，从而影响大豆的开花。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100633-10.webp" alt="image"></p>
<blockquote>
<p>图10 E3 在不同大豆材料中的结构变异 A：E3 在基因组中的物理位置。B：不同种质中E3的单倍型。C：13.3 kb的缺失导致单倍型E3-tr 材料中SoyZH13_19G210500基因丢失和E3 (SoyZH13_19G210400)与其邻近基因SoyZH13_19G210600的基因融合。（图片引自文献[1]）</p>
</blockquote>
<h3 id="SVs对基因表达的影响"><a href="#SVs对基因表达的影响" class="headerlink" title="SVs对基因表达的影响"></a>SVs对基因表达的影响</h3><p>通过对SVs所在的区域进行分类展示，并结合转录组数据对基因表达进行分析，有助于挖掘影响基因表达的关键SVs。</p>
<p>例如，番茄结构变异研究[5]通过检测有和无SVs时相关基因的差异表达程度，来检测受SVs影响的表达基因。结果发现在21,156个SV-基因对中发现数百个显著的表达改变。研究表明结构变异通过改变基因剂量效应和表达水平，从而影响果实的风味，大小和产量。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100633-11.webp" alt="image"></p>
<blockquote>
<p>图11 番茄SVs对基因表达的影响 左图：番茄材料中不同基因组特征SVs的百分比。右图：受不同类型SVs影响的差异表达基因的数量情况。（图片引自文献[5]）</p>
</blockquote>
<h1 id="二、技术策略"><a href="#二、技术策略" class="headerlink" title="二、技术策略"></a>二、技术策略</h1><h2 id="样本选择"><a href="#样本选择" class="headerlink" title="样本选择"></a>样本选择</h2><p>为全面捕获物种所有的基因组信息，建议<strong>基于经验或群体结构信息选择最具代表性的个体</strong>进行泛基因组构建，推荐<strong>样本个数≥5个</strong>，具体可根据物种基因组大小、复杂度及群体复杂度进行调整。</p>
<p>大豆泛基因组研究[1]中，研究者通过2,898份大豆的重测序和进化树构建，选择了26份在系统发育关系和地理分布方面最具代表性的材料进行泛基因组构建。大麦泛基因组研究[7] 中，研究者通过19,778份大麦种质的基因分型数据的PCA（包含不同地理来源、行类型、生长习性等材料）选择了20份大麦来代表其遗传多样性。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100633-12.webp" alt="image"></p>
<blockquote>
<p>图12 20份代表性大麦的材料选择（图片引自文献[7]）</p>
</blockquote>
<h2 id="测序策略"><a href="#测序策略" class="headerlink" title="测序策略"></a>测序策略</h2><p>推荐采用<strong>PacBio HiFi测序</strong>，读长长且准确，测序深度≥<strong>15X&#x2F;样本</strong>。</p>
<p>HiFi组装作为组装界的新秀，具有组装周期短，准确性高，连续性好，简单基因组和复杂基因组通吃的特点，对于泛基因组这样的大样本量基因组组装尤其合适，大幅缩短组装周期，提高组装准确性和连续性。</p>
<p>缺点是贵。目前真正用HiFi来做泛基因组的还是很少，但二代和三代都有，二代组装相对来说比较碎，可能研究不了太深的问题。</p>
<p><img src="/2024/07/06/%E6%B3%9B%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%AD%A6%E4%B9%A0-%E7%90%86%E8%AE%BA1/1240-1720231100633-13.webp" alt="image.png"></p>
<p>​                                                     HiFi测序深度与组装连续性的关系</p>
]]></content>
      <tags>
        <tag>pangenome</tag>
        <tag>理论</tag>
      </tags>
  </entry>
  <entry>
    <title>群论学习1</title>
    <url>/2024/07/01/%E7%BE%A4%E8%AE%BA%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="群论"><a href="#群论" class="headerlink" title="群论"></a>群论</h2><p>在<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6">数学</a>和<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0">抽象代数</a>中，<strong>群论</strong>（英语：Group theory）研究名为<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4">群</a>的<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E6%95%B0%E7%BB%93%E6%9E%84">代数结构</a>。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BE%A4">群</a>在抽象代数中具有基本的重要地位：许多代数结构，包括<a href="https://zh.wikipedia.org/wiki/%E7%8E%AF_(%E4%BB%A3%E6%95%B0)">环</a>、<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F_(%E6%95%B0%E5%AD%A6)">域</a>和<a href="https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4">向量空间</a>等可以看作是在群的基础上添加新的<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E7%AE%97">运算</a>和<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E7%90%86">公理</a>而形成的。群的概念在数学的许多分支都有出现，而且群论的研究方法也对抽象代数的其它分支有重要影响。<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%BE%A4&action=edit&redlink=1">线性代数群</a>和<a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E7%BE%A4">李群</a>作为群论的分支，在经历了重大的发展之后，已经形成相对独立的研究领域。</p>
<span id="more"></span>

<p>群论的重要性还体现在<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86%E5%AD%A6">物理学</a>和<a href="https://zh.wikipedia.org/wiki/%E5%8C%96%E5%AD%A6">化学</a>的研究中，因为许多不同的物理结构，如<a href="https://zh.wikipedia.org/wiki/%E6%99%B6%E4%BD%93">晶体</a>结构和<a href="https://zh.wikipedia.org/wiki/%E6%B0%A2%E5%8E%9F%E5%AD%90">氢原子</a>结构可以用群论方法来进行建模。于是群论和相关的<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E8%A1%A8%E7%A4%BA%E8%AE%BA">群表示论</a>在物理学和化学中有大量的应用。</p>
<p>群论中的重要结果，<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E5%8D%95%E7%BE%A4%E5%88%86%E7%B1%BB">有限单群分类</a>是20世纪数学最重要的结果之一。该定理的证明是集体努力的结果，它的证明出现在1960年和1980年之间出版的超过10,000页的期刊上。</p>
<hr>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>主条目：<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BE%A4%E8%AE%BA%E5%8E%86%E5%8F%B2&action=edit&redlink=1">群论历史</a></p>
<p>群论在历史上主要有三个来源：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA">数论</a>，<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E6%95%B0%E6%96%B9%E7%A8%8B">代数方程</a>理论和<a href="https://zh.wikipedia.org/wiki/%E5%87%A0%E4%BD%95%E5%AD%A6">几何学</a>。数论中出现的对群的研究始于<a href="https://zh.wikipedia.org/wiki/%E8%8E%B1%E6%98%82%E5%93%88%E5%BE%B7%C2%B7%E6%AC%A7%E6%8B%89">莱昂哈德·欧拉</a>，之后由<a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%B0%94%C2%B7%E5%BC%97%E9%87%8C%E5%BE%B7%E9%87%8C%E5%B8%8C%C2%B7%E9%AB%98%E6%96%AF">卡尔·弗里德里希·高斯</a>在对<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%AE%97%E6%9C%AF">模算术</a>和与<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E6%AC%A1%E5%9F%9F">二次域</a>相关的乘法和加法的研究中进行了发展。群论的概念在<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E6%95%B0%E6%95%B0%E8%AE%BA">代数数论</a>中首先被隐含地使用，后来才显式地运用它们。</p>
<p>关于<a href="https://zh.wikipedia.org/wiki/%E7%BD%AE%E6%8D%A2%E7%BE%A4">置换群</a>的早期结果出现在<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%C2%B7%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5">约瑟夫·拉格朗日</a>、<a href="https://zh.wikipedia.org/wiki/%E4%BF%9D%E7%BE%85%C2%B7%E9%AD%AF%E8%8F%B2%E5%B0%BC">保罗·鲁菲尼</a>和<a href="https://zh.wikipedia.org/wiki/%E5%B0%BC%E5%B0%94%E6%96%AF%C2%B7%E9%98%BF%E8%B4%9D%E5%B0%94">尼尔斯·阿贝尔</a>等人关于高次方程一般解的工作中。1830年，<a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E7%93%A6%E9%87%8C%E6%96%AF%E7%89%B9%C2%B7%E4%BC%BD%E7%BD%97%E7%93%A6">埃瓦里斯特·伽罗瓦</a>第一个用群的观点来确定<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%96%B9%E7%A8%8B">多项式方程</a>的可解性。伽罗瓦首次使用了术语“群”，并在新生的群的理论与<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E8%AB%96">域论</a>之间建立起了联系。这套理论现在被称为<a href="https://zh.wikipedia.org/wiki/%E4%BC%BD%E7%BE%85%E7%93%A6%E7%90%86%E8%AB%96">伽罗瓦理论</a>。<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E7%91%9F%C2%B7%E5%87%AF%E8%8E%B1">阿瑟·凯莱</a>和<a href="https://zh.wikipedia.org/wiki/%E5%A5%A7%E5%8F%A4%E6%96%AF%E4%B8%81%C2%B7%E8%B7%AF%E6%98%93%C2%B7%E6%9F%AF%E8%A5%BF">奥古斯丁·路易·柯西</a>进一步发展了这些研究，创立了<a href="https://zh.wikipedia.org/wiki/%E7%BD%AE%E6%8D%A2%E7%BE%A4">置换群</a>理论。</p>
<p>群论的第三个主要历史渊源来自几何。群论在<a href="https://zh.wikipedia.org/wiki/%E5%B0%84%E5%BD%B1%E5%87%A0%E4%BD%95">射影几何</a>中首次显示出它的重要性，并在之后的<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E6%AC%A7%E5%87%A0%E4%BD%95">非欧几何</a>中起到了作用。<a href="https://zh.wikipedia.org/wiki/%E8%8F%B2%E5%88%A9%E5%85%8B%E6%96%AF%C2%B7%E5%85%8B%E8%8E%B1%E5%9B%A0">菲利克斯·克莱因</a>用群论的观点，在不同的几何学（如<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E5%87%A0%E4%BD%95">欧几里德几何</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%87%A0%E4%BD%95">双曲几何</a>、<a href="https://zh.wikipedia.org/wiki/%E5%B0%84%E5%BD%B1%E5%87%A0%E4%BD%95">射影几何</a>）之间建立了联系，即<a href="https://zh.wikipedia.org/wiki/%E7%88%B1%E5%B0%94%E5%85%B0%E6%A0%B9%E7%BA%B2%E9%A2%86">爱尔兰根纲领</a>。1884年，<a href="https://zh.wikipedia.org/wiki/%E7%B4%A2%E8%8F%B2%E6%96%AF%C2%B7%E6%9D%8E">索菲斯·李</a>开始研究<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90">分析学</a>问题中出现的群（现在称为<a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E7%BE%A4">李群</a>）。</p>
<p>属于不同领域的来源导致了群的不同记法。群的理论从约1880年起开始统一。在那之后，群论的影响一直在扩大，在20世纪早期促进了<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0">抽象代数</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%A4%BA%E8%AE%BA">表示论</a>和其他许多有影响力的子领域的建立。<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E5%96%AE%E7%BE%A4%E5%88%86%E9%A1%9E">有限单群分类</a>是20世纪中叶一项规模庞大的工作，对一切的<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E9%9B%86%E5%90%88">有限</a><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E7%BE%A4">单群</a>进行了分类。</p>
<hr>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>主条目：<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4">群</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B&action=edit&redlink=1">群的类型</a></p>
<p>群论考虑的群的类型从有限置换群和一些特殊的<a href="https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5%E7%BE%A4">矩阵群</a>逐渐进展到抽象群。这些抽象群可以由<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E7%9A%84%E7%94%9F%E6%88%90%E9%9B%86%E5%90%88">生成元</a>和<a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB_(%E6%95%B0%E5%AD%A6)">关系</a>给定。</p>
<h6 id="置换群、矩阵群、变换群、抽象群"><a href="#置换群、矩阵群、变换群、抽象群" class="headerlink" title="置换群、矩阵群、变换群、抽象群"></a>置换群、矩阵群、变换群、抽象群</h6><hr>
<h2 id="应用-编辑"><a href="#应用-编辑" class="headerlink" title="应用[编辑]"></a>应用[<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BE%A4%E8%AE%BA&action=edit&section=8">编辑</a>]</h2><p>群论在数学上被广泛地运用，通常以<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%90%8C%E6%A7%8B%E7%BE%A4">自同构群</a>的形式体现某些结构的内部对称性。结构的内部对称性常常和一种不变式性质同时存在。如果在一类操作中存在不变式，那这些操作转换的组合和不变式统称为一个对称群。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E8%B4%9D%E5%B0%94%E7%BE%A4">阿贝尔群</a>概括了另外几种抽象集合研究的结构，例如<a href="https://zh.wikipedia.org/wiki/%E7%8E%AF_(%E4%BB%A3%E6%95%B0)">环</a>、<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F_(%E6%95%B8%E5%AD%B8)">域</a>、<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1">模</a>。</p>
<p>在<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E6%95%B0%E6%8B%93%E6%89%91">代数拓扑</a>中，群用于描述拓扑空间转换中不变的性质，例如基本群和透射群。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E7%BE%A4">李群</a>的概念在<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B">微分方程</a>和<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%BD%A2">流形</a>中都有很重要的角色，因其结合了群论和<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%9E%90%E5%AD%A6">分析学</a>，<a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E7%BE%A4">李群</a>能很好的描述分析数学结构中的对称性。对这类群的分析又叫<a href="https://zh.wikipedia.org/wiki/%E8%AA%BF%E5%92%8C%E5%88%86%E6%9E%90">调和分析</a>。</p>
<p>在<a href="https://zh.wikipedia.org/wiki/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6">组合数学</a>中，<a href="https://zh.wikipedia.org/wiki/%E4%BA%A4%E6%8D%A2%E7%BE%A4">交换群</a>和<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E4%BD%9C%E7%94%A8">群作用</a>常用来简化在某些集合内的元素的计算。</p>
<p>后来群论广泛应用于各个科学领域。凡是有对称性出现的地方，就会有它的影子，例如物理学的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E5%BC%A6%E7%90%86%E8%AB%96">超弦理论</a>。</p>
<hr>
<p>群（group）是一种规定了特殊乘法的集合，在这个运算规则框架下，集合中的元素满足：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>恒等元</td>
<td>存在一个元素运算后不改变零一元素的元素</td>
<td>0+a&#x3D;a</td>
</tr>
<tr>
<td>封闭性</td>
<td>运算结果任在集合内</td>
<td>整数相加还是整数</td>
</tr>
<tr>
<td>逆元素</td>
<td>每个元素都存在一个与他运算后等于恒等元的元素</td>
<td>整数的相反数</td>
</tr>
<tr>
<td>结合律</td>
<td>运算中加括号改变运算优先级不影响结果</td>
<td>算数加法乘法满足结合律</td>
</tr>
</tbody></table>
<p>例如：对称性旋转和翻转（二维）</p>
<p>旋转:C3群</p>
<p>旋转 翻转:D3群、S3群、C^2_6群<br>$$<br>C^2_6<br>$$<br>特殊：满足交换律的群称为阿贝尔群 G3</p>
<hr>
<p>实数加法群：实数集合，加法运算。    对应数轴的平移对称性 ，解释时间和空间的原点选择是任意的（纪年起始点）</p>
<p>非零实数乘法群：非零实数，乘法运算。   对应数轴缩放对称性， 解释时间和空间的单位长度选择是任意的（纪年历法长短）</p>
<p>二维以上有：平移、缩放、旋转、改变坐标轴之间夹角这些变换，称为线性变换，对应的群称为矩阵乘法群。</p>
]]></content>
      <tags>
        <tag>群论</tag>
      </tags>
  </entry>
  <entry>
    <title>计算xpehh选择信号</title>
    <url>/2024/04/28/%E8%AE%A1%E7%AE%97xpehh%E9%80%89%E6%8B%A9%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<p>xpehh (Cross Population Extended Haplotype Homozygosity) 是一种用于选择信号检测的统计方法，用于寻找遗传变异与自然选择之间的关联。它基于单核苷酸多态性（SNP）在不同群体之间的扩展单倍型同质性差异。通过计算目标群体与参考群体之间的扩展单倍型同质性差异，并进行统计检验，xpehh 方法可以帮助检测到与自然选择相关的遗传变异。这种方法在遗传学和人类进化研究中得到了广泛应用。</p>
<span id="more"></span>

<p>xpehh 的选择信号原理如下：</p>
<ol>
<li>扩展单倍型同质性：xpehh 方法使用单倍型信息来评估一个给定区域内的扩展单倍型同质性。这是指在某个区域内，多个连续的SNP共同遗传的单倍型。</li>
<li>不同群体间的比较：xpehh 方法将目标群体与参考群体进行比较。通常，目标群体是受选择的种群，而参考群体是未受选择的种群。通过比较两个群体之间的扩展单倍型同质性差异，可以检测到选择信号。</li>
<li>基于单倍型频率的计算：xpehh 方法基于单倍型频率来计算扩展单倍型同质性。它通过比较目标群体和参考群体中特定单倍型的频率差异来确定选择信号。如果某个单倍型在目标群体中频率较高，而在参考群体中频率较低，可能表明该区域存在选择。</li>
<li>统计检验：xpehh 方法使用统计检验来评估扩展单倍型同质性差异的显著性。常用的统计检验方法包括 Z 分数、标准化扩展单倍型同质性（XP-EHH）和正态近似。</li>
</ol>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a><strong>计算</strong></h2><h3 id="1-群体较少的情况"><a href="#1-群体较少的情况" class="headerlink" title="1.群体较少的情况"></a><strong>1.群体较少的情况</strong></h3><h5 id="分染色体填充数据"><a href="#分染色体填充数据" class="headerlink" title="#分染色体填充数据"></a><strong>#分染色体填充数据</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..27&#125;;<span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">java -Xms500g -Xmx500g -jar /mnt/d/lx/soft/beagle/beagle.22Jul22.46e.jar nthreads=110  gt=/mnt/d/lx/data/chr/chr<span class="variable">$i</span>.recode.vcf out=phasechr<span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="XP-EHH脚本"><a href="#XP-EHH脚本" class="headerlink" title="# XP-EHH脚本"></a><strong># XP-EHH脚本</strong></h5><h5 id="调用，给出文件路径"><a href="#调用，给出文件路径" class="headerlink" title="#调用，给出文件路径"></a><strong>#调用，给出文件路径</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash selscan.sh -v /mnt/d/lx/data/vcf323/phase323vcf.vcf.gz -r /mnt/d/lx/data/grouph/group19.txt -t /mnt/d/lx/data/grouph/other.txt -w 150000 -s 75000 -T 100 -chr 27 -o new</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="编写sh"><a href="#编写sh" class="headerlink" title="#编写sh"></a><strong>#编写sh</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#create by lx</span></span><br><span class="line">selscan=<span class="string">&quot;/home/liuxiao/soft/selscan/linux/selscan&quot;</span></span><br><span class="line">norm=<span class="string">&#x27;/home/liuxiao/soft/selscan/linux/norm&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: bash <span class="variable">$0</span> --vcf &lt;vcf&gt; --ref &lt;ref&gt; --tag &lt;tag&gt; --win &lt;winsize&gt; --thread &lt;thread&gt; --output &lt;outprefix&gt;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;required options&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-v|--vcf    vcf file&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-r|--ref    ref sample per row per ID&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-t|--tag    tag sample per row per ID&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-w|--win    winsize in xpehh, default 50000&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-s|--step   stepsize in xpehh, defult 50000&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-T|--thread  threads, default 10&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-c|--chr    最大染色体号，决定你的vcf文件分多少个染色体文件&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-o|--output  输出文件前缀&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vcf=<span class="string">&quot;&quot;</span></span><br><span class="line">ref=<span class="string">&quot;&quot;</span></span><br><span class="line">tag=<span class="string">&quot;&quot;</span></span><br><span class="line">win=<span class="string">&quot;50000&quot;</span></span><br><span class="line">step=<span class="string">&quot;50000&quot;</span></span><br><span class="line">thread=<span class="string">&quot;50&quot;</span></span><br><span class="line">chr=<span class="string">&quot;&quot;</span></span><br><span class="line">output=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$#</span> -gt 0 ]];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  -v|--vcf )</span><br><span class="line"> vcf=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -r|--ref )</span><br><span class="line"> ref=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -t|--tag )</span><br><span class="line">tag=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -w|--win )</span><br><span class="line"> win=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -s|--step )</span><br><span class="line"> step=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -T|--thread )</span><br><span class="line"> thread=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -c|--chr )</span><br><span class="line">chr=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -o|--output )</span><br><span class="line">output=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  *) <span class="built_in">echo</span> <span class="string">&quot;输入参数不对哦!&quot;</span> &gt;&amp;2</span><br><span class="line">usage</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$vcf</span> ] || [ -z <span class="variable">$ref</span> ] || [ -z <span class="variable">$tag</span> ] || [ -z <span class="variable">$output</span> ]; <span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;检查一下这几个参数输了没 --vcf --ref --tag --output !&quot;</span> &gt;&amp;2</span><br><span class="line">  usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;    </span><br><span class="line"><span class="built_in">mkdir</span> XP-EHH.progress</span><br><span class="line">\<span class="comment"># extract sample</span></span><br><span class="line"><span class="variable">$vcftools</span> --gzvcf <span class="variable">$vcf</span> --keep <span class="variable">$ref</span> --recode --recode-INFO-all --out ./XP-EHH.progress/01.ref</span><br><span class="line"><span class="variable">$vcftools</span> --gzvcf <span class="variable">$vcf</span> --keep <span class="variable">$tag</span> --recode --recode-INFO-all --out ./XP-EHH.progress/01.tag</span><br><span class="line"><span class="built_in">cd</span> XP-EHH.progress</span><br><span class="line"><span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">\<span class="comment"># splite chr for ref and tag</span></span><br><span class="line"><span class="variable">$vcftools</span> --vcf 01.ref.recode.vcf --recode --recode-INFO-all --chr <span class="variable">$&#123;k&#125;</span> --out ref.chr<span class="variable">$&#123;k&#125;</span></span><br><span class="line"><span class="variable">$vcftools</span> --vcf 01.tag.recode.vcf --recode --recode-INFO-all --chr <span class="variable">$&#123;k&#125;</span> --out tag.chr<span class="variable">$&#123;k&#125;</span>   </span><br><span class="line">\<span class="comment"># calculate map distance         </span></span><br><span class="line"><span class="variable">$vcftools</span> --vcf ref.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --plink --out chr<span class="variable">$&#123;k&#125;</span>.MT</span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;OFS=&quot; &quot;&#125; &#123;print $1,&quot;.&quot;,$4,$4&#125;&#x27;</span> chr<span class="variable">$&#123;k&#125;</span>.MT.map &gt; chr<span class="variable">$&#123;k&#125;</span>.MT.map.distance</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">\<span class="comment"># XP-EHH</span></span><br><span class="line"><span class="variable">$selscan</span> --xpehh --vcf tag.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --vcf-ref ref.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --map chr<span class="variable">$&#123;k&#125;</span>.MT.map.distance --threads <span class="variable">$thread</span> --out  chr<span class="variable">$&#123;k&#125;</span>.ref_tag      </span><br><span class="line">\<span class="comment"># norm</span></span><br><span class="line"><span class="variable">$norm</span> --xpehh --files  chr<span class="variable">$&#123;k&#125;</span>.ref_tag.xpehh.out --bp-win --winsize <span class="variable">$win</span> </span><br><span class="line">\<span class="comment"># add win and step</span></span><br><span class="line">python ../XPEHH_Win_step.py --file chr<span class="variable">$&#123;k&#125;</span>.ref_tag.xpehh.out.norm -c <span class="variable">$k</span> --window <span class="variable">$win</span> --step <span class="variable">$step</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">cat</span> &#123;1..<span class="string">&quot;<span class="variable">$chr</span>&quot;</span>&#125;.XPEHH &gt; ../<span class="variable">$&#123;output&#125;</span>.XPEHH</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<h5 id="XPEHH-Win-step-py"><a href="#XPEHH-Win-step-py" class="headerlink" title="#XPEHH_Win_step.py"></a>#<strong>XPEHH_Win_step.py</strong></h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">file</span>):</span><br><span class="line">    data = pd.read_csv(file, delimiter=<span class="string">&quot;\t|\s+&quot;</span>, </span><br><span class="line">                       engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">data, step_size, window_size</span>):</span><br><span class="line">    result = []</span><br><span class="line">    chromosome_length = <span class="built_in">max</span>(data[<span class="string">&#x27;pos&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> BIN_START <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, chromosome_length, step_size):</span><br><span class="line">        BIN_END = BIN_START - <span class="number">1</span> + window_size</span><br><span class="line">        <span class="keyword">if</span> BIN_START + window_size &gt; chromosome_length:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        normxpehh_vals = []</span><br><span class="line">        <span class="keyword">for</span> _, row <span class="keyword">in</span> data[(data[<span class="string">&#x27;pos&#x27;</span>] &gt;= BIN_START) &amp; (data[<span class="string">&#x27;pos&#x27;</span>] &lt; BIN_END)].iterrows():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pd.isna(row[<span class="string">&#x27;pos&#x27;</span>]):</span><br><span class="line">                normxpehh_vals.append(row[<span class="string">&#x27;normxpehh&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算 normxpehh 的平均值并保留4位小数, 统计区间SNP数量</span></span><br><span class="line">        avg_normxpehh = <span class="number">0</span></span><br><span class="line">        nvar = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(normxpehh_vals) &gt; <span class="number">0</span>:</span><br><span class="line">            avg_normxpehh = <span class="built_in">round</span>(<span class="built_in">sum</span>(normxpehh_vals) / <span class="built_in">len</span>(normxpehh_vals), <span class="number">4</span>)</span><br><span class="line">            nvar = <span class="built_in">len</span>(normxpehh_vals)</span><br><span class="line">        result.append([BIN_START, BIN_END, </span><br><span class="line">                       avg_normxpehh, nvar])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-f&#x27;</span>,<span class="string">&#x27;--file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;xpehh.out.norm文件，norm后的位点文件，不是区间文件！！&#x27;</span>, required=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;--chr&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;染色体号，因为是分染色体做的&#x27;</span>, required=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-w&#x27;</span>,<span class="string">&#x27;--window&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;窗口大小&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">50000</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;--step&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;步长大小&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">50000</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">file, chromosome, window, step</span>):</span><br><span class="line">    data = load_data(file)</span><br><span class="line">    window_size = window</span><br><span class="line">    step_size = step</span><br><span class="line">    out = results(data, step_size, window_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 DataFrame 对象来保存结果，并使用 to_csv 方法将其写入文件中</span></span><br><span class="line">    result_df = pd.DataFrame(out, columns=[<span class="string">&quot;BIN_START&quot;</span>, <span class="string">&quot;BIN_END&quot;</span>, </span><br><span class="line">                                           <span class="string">&quot;avg_normxpehh&quot;</span>, <span class="string">&quot;nvar&quot;</span>])</span><br><span class="line">    result_df.loc[:, <span class="string">&#x27;CHROM&#x27;</span>] = chromosome</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> chromosome == <span class="number">1</span>:</span><br><span class="line">        result_df[[<span class="string">&quot;CHROM&quot;</span>, <span class="string">&quot;BIN_START&quot;</span>, <span class="string">&quot;BIN_END&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;nvar&quot;</span>, <span class="string">&quot;avg_normxpehh&quot;</span>]].to_csv(<span class="string">f&#x27;<span class="subst">&#123;chromosome&#125;</span>.XPEHH&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>,</span><br><span class="line">                                                    index=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_df[[<span class="string">&quot;CHROM&quot;</span>, <span class="string">&quot;BIN_START&quot;</span>, <span class="string">&quot;BIN_END&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;nvar&quot;</span>, <span class="string">&quot;avg_normxpehh&quot;</span>]].to_csv(<span class="string">f&#x27;<span class="subst">&#123;chromosome&#125;</span>.XPEHH&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>,</span><br><span class="line">                                                    index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="2多个群体计算"><a href="#2多个群体计算" class="headerlink" title="2多个群体计算"></a><strong>2多个群体计算</strong></h3><h5 id="自用，给出文件夹路径"><a href="#自用，给出文件夹路径" class="headerlink" title="#自用，给出文件夹路径"></a><strong>#自用，给出文件夹路径</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#create by lx</span></span><br><span class="line">selscan=<span class="string">&quot;/home/liuxiao/soft/selscan/linux/selscan&quot;</span></span><br><span class="line">norm=<span class="string">&quot;/home/liuxiao/soft/selscan/linux/norm&quot;</span></span><br><span class="line">vcftools=<span class="string">&#x27;/home/liuxiao/miniconda3/bin/vcftools&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: bash <span class="variable">$0</span> --pi &lt;vcf_folder&gt;  --win &lt;winsize&gt; --step &lt;stepsize&gt; --thread &lt;thread&gt; --output &lt;outprefix&gt;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;required options&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-pi|--pwdinput    folder containing VCF files&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-w|--win    winsize in xpehh, default 50000&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-s|--step   stepsize in xpehh, default 50000&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-t|--thread threads, default 10&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-c|--chr &quot;</span>    </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-po|--pwdout output file prefix&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vcf_folder=<span class="string">&quot;&quot;</span></span><br><span class="line">tag=<span class="string">&quot;&quot;</span></span><br><span class="line">win=<span class="string">&quot;150000&quot;</span></span><br><span class="line">step=<span class="string">&quot;75000&quot;</span></span><br><span class="line">thread=<span class="string">&quot;60&quot;</span></span><br><span class="line">chr=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">pwd</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash *sh -pi /home/liuxiao/1254/result/vcf/  -w 150000 -s 75000 -c 27 -t 60   -po /home/liuxiao/1254/result/selscan/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$#</span> -gt 0 ]]; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    -pi|--pwdinput )</span><br><span class="line">      vcf_folder=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -w|--win )</span><br><span class="line">      win=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -s|--step )</span><br><span class="line">      step=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -t|--thread )</span><br><span class="line">      thread=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -c|--chr )</span><br><span class="line">      chr=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;      </span><br><span class="line">    -po|--pwdout )</span><br><span class="line">      <span class="built_in">pwd</span>=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    *) <span class="built_in">echo</span> <span class="string">&quot;Invalid input parameter!&quot;</span> &gt;&amp;2</span><br><span class="line">       usage</span><br><span class="line">       <span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$vcf_folder</span> ] || [ -z <span class="variable">$pwd</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Please check if you have provided the required parameters: --pwdinput,  and --pwdoutput!&quot;</span> &gt;&amp;2</span><br><span class="line">  usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;    </span><br><span class="line"><span class="keyword">for</span> vcf_file <span class="keyword">in</span> <span class="variable">$vcf_folder</span>/*.vcf.gz; </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  vcf_filename=$(<span class="built_in">basename</span> <span class="variable">$vcf_file</span>)</span><br><span class="line">  vcf_filename_no_ext=<span class="string">&quot;<span class="variable">$&#123;vcf_filename%.vcf.gz&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">mkdir</span> $<span class="built_in">pwd</span><span class="variable">$&#123;vcf_filename_no_ext&#125;</span></span><br><span class="line">  <span class="built_in">cd</span> $<span class="built_in">pwd</span><span class="variable">$&#123;vcf_filename_no_ext&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    <span class="comment"># splite chr for ref and tag</span></span><br><span class="line">    <span class="variable">$vcftools</span> --gzvcf $vcf_folder<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.vcf.gz --recode --recode-INFO-all --chr <span class="variable">$&#123;k&#125;</span> --out  <span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.chr<span class="variable">$&#123;k&#125;</span> &amp;</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">    <span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    <span class="variable">$selscan</span> --xpehh --vcf /home/liuxiao/1254/result/selscan/hu/Hu.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --vcf-ref  <span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --map /home/liuxiao/1254/result/vcf/map/chr<span class="variable">$&#123;k&#125;</span>.MT.map.distance --threads <span class="variable">$thread</span> --out  chr<span class="variable">$&#123;k&#125;</span>.<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>      </span><br><span class="line"></span><br><span class="line">    <span class="variable">$norm</span> --xpehh --files  chr<span class="variable">$&#123;k&#125;</span>.<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.xpehh.out --bp-win --winsize <span class="variable">$win</span> </span><br><span class="line"></span><br><span class="line">    python /home/liuxiao/1254/result/selscan/XPEHH_Win_step.py --file chr<span class="variable">$&#123;k&#125;</span>.<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.xpehh.out.norm -c <span class="variable">$k</span> --window <span class="variable">$win</span> --step <span class="variable">$step</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">cat</span> *.XPEHH &gt; /home/liuxiao/1254/result/selscan/<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.XPEHH</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<h5 id="python脚本同上"><a href="#python脚本同上" class="headerlink" title="python脚本同上"></a><strong>python脚本同上</strong></h5>]]></content>
      <categories>
        <category>Genome</category>
        <category>Selection_signature</category>
      </categories>
      <tags>
        <tag>xpehh</tag>
        <tag>selscan</tag>
      </tags>
  </entry>
  <entry>
    <title>使用picard转换参考基因组坐标</title>
    <url>/2024/07/11/%E4%BD%BF%E7%94%A8picard%E8%BD%AC%E6%8D%A2%E5%8F%82%E8%80%83%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<h3 id="先picard-建立基因组索引-dict文件，再vcf坐标转换"><a href="#先picard-建立基因组索引-dict文件，再vcf坐标转换" class="headerlink" title="先picard 建立基因组索引.dict文件，再vcf坐标转换"></a>先picard 建立基因组索引.dict文件，再vcf坐标转换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar /home/liuxiao/soft/picard/picard.jar CreateSequenceDictionary R= sequences.fa O=sequences.fa.dict</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">示例</span><br><span class="line">java -jar /home/lx/soft/picard.jar LiftoverVcf \</span><br><span class="line">I=/home/lx/wsl/caid323.vcf.gz  \</span><br><span class="line">O=323.vcf \</span><br><span class="line">CHAIN=/home/lx/wsl/oviAri4Tooarv1.over.chain  \</span><br><span class="line">REJECT=unmap_variants.vcf  \</span><br><span class="line">R=/home/lx/wsl/oarchange/oarv1.fasta </span><br></pre></td></tr></table></figure>

<p>相关的.fa文件，.dict文件，.vcf文件, .chain文件均尽量软连接在同一文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s $truepath  #软连接</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>picard</tag>
        <tag>转换坐标</tag>
      </tags>
  </entry>
  <entry>
    <title>使用snpeff注释VCF文件</title>
    <url>/2024/07/11/%E4%BD%BF%E7%94%A8snpeff%E6%B3%A8%E9%87%8AVCF%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="使用SnpEff对得到的标记进行注释"><a href="#使用SnpEff对得到的标记进行注释" class="headerlink" title="使用SnpEff对得到的标记进行注释"></a><strong>使用SnpEff对得到的标记进行注释</strong></h2><p>VCF（Variant Call Format）文件变异注释是一种生物信息学分析过程，用于为VCF文件中记录的基因变异提供详细的功能和临床信息。这些变异可能包括单核苷酸多态性（SNP）、插入和缺失（indels）等。变异注释的目的是理解这些变异的生物学意义及其潜在的影响。</p>
<p>具体来说，变异注释包括以下几个方面的内容：</p>
<ol>
<li><strong>基因信息</strong>：<ul>
<li><strong>基因名称</strong>：识别变异所在的基因。</li>
<li><strong>转录本信息</strong>：标识变异影响的特定转录本。</li>
</ul>
</li>
<li><strong>变异类型</strong>：<ul>
<li><strong>编码区变异</strong>：包括错义变异、同义变异、无义变异等。</li>
<li><strong>非编码区变异</strong>：包括内含子变异、上游&#x2F;下游变异、调控区域变异等。</li>
</ul>
</li>
<li><strong>功能影响</strong>：<ul>
<li><strong>蛋白质影响</strong>：例如，变异是否会导致氨基酸的改变。</li>
<li><strong>结构影响</strong>：例如，变异是否会影响蛋白质的结构或功能。</li>
</ul>
</li>
<li><strong>临床意义</strong>：<ul>
<li><strong>已知疾病关联</strong>：变异是否与某些遗传疾病或综合征相关。</li>
<li><strong>药物反应</strong>：变异是否会影响个体对某些药物的反应。</li>
</ul>
</li>
<li><strong>保守性和进化信息</strong>：<ul>
<li><strong>保守性评分</strong>：变异位置在进化过程中是否保守，保守性较高的位置通常对功能更重要。</li>
<li><strong>进化信息</strong>：变异在不同物种中的保守性。</li>
</ul>
</li>
<li><strong>频率信息</strong>：<ul>
<li><strong>群体频率</strong>：变异在不同人群中的频率，通常来自于公共变异数据库，如1000 Genomes、gnomAD等。</li>
</ul>
</li>
<li><strong>数据库注释</strong>：<ul>
<li><strong>ClinVar</strong>：变异的临床意义注释。</li>
<li><strong>dbSNP</strong>：常见的SNP数据库注释。</li>
<li><strong>COSMIC</strong>：癌症相关变异数据库注释。</li>
</ul>
</li>
</ol>
<h3 id="变异注释的工具"><a href="#变异注释的工具" class="headerlink" title="变异注释的工具"></a>变异注释的工具</h3><p>有多种工具和软件可以进行VCF文件的变异注释，包括但不限于：</p>
<ul>
<li><p><strong>ANNOVAR</strong>：一个广泛使用的变异注释工具。</p>
</li>
<li><p>**VEP (Variant Effect Predictor)**：由Ensembl提供的变异注释工具。</p>
</li>
<li><p><strong>SnpEff</strong>：一个高效的变异注释和预测工具。</p>
<p>本文主要将snpEff注释</p>
</li>
</ul>
<h3 id="snpeff注释变异文件"><a href="#snpeff注释变异文件" class="headerlink" title="snpeff注释变异文件"></a>snpeff注释变异文件</h3><p>在存放物种数据库的data文件下面运行注释的命令</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">###配置后，直接运行，备忘</span><br><span class="line">#build</span><br><span class="line">java -jar snpEff.jar build -gff3 -v oarv1</span><br><span class="line"></span><br><span class="line">#成功注释</span><br><span class="line">java -Xmx16g -jar /home/liuxiao/soft/snpeff/snpEff.jar ann  oarv1   miss0.7.vcf.recode.vcf   &gt; 325.ann.vcf</span><br></pre></td></tr></table></figure>

<p>在使用gatk挖掘出相应的变异信息之后，需要对得到的变异信息SNP或Indel进行注释，然后再筛选。打算使用SnpEff来进行注释。</p>
<h3 id="下载安装SnpEff"><a href="#下载安装SnpEff" class="headerlink" title="下载安装SnpEff"></a><strong>下载安装SnpEff</strong></h3><p>去官网<a href="https://link.zhihu.com/?target=https://pcingola.github.io/SnpEff/">SnpEff</a>找到相应最新版本的下载链接，然后下载到服务器中</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">wget -c https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip</span><br><span class="line"></span><br><span class="line">unzip snpEff_latest_core.zip</span><br></pre></td></tr></table></figure>

<p>直接在官网下载最新版本的软件，然后使用unzip解压即可看见SnpEff文件夹里面有相应的脚本文件</p>
<h3 id="SnpEff使用"><a href="#SnpEff使用" class="headerlink" title="SnpEff使用"></a><strong>SnpEff使用</strong></h3><p>首先要将我们需要用到的参考基因组添加到SnpEff的配置文件里面，我是添加在最后一行了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vim snpEff.config  #使用vim编辑该文件，使用G跳转最后一行</span><br><span class="line">添加如下注释信息（你需要用到的物种信息）</span><br><span class="line"></span><br><span class="line"># ovis_v1</span><br><span class="line">ovis.genome : ovis</span><br></pre></td></tr></table></figure>



<p>SnpEff配置文件修改</p>
<p>在SnpEff下面新建data文件夹，并在里面新建你添加的物种的文件夹</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mkdir -p ovis</span><br></pre></td></tr></table></figure>

<p>需要下载参考基因组的染色体水平的fasta文件以及gff文件</p>
<p>上传到指定的XX文件夹之后要将文件名称改SnpEff需要的名字</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mv oarv1.gff genes.gff</span><br><span class="line">mv oarv1.fasta squences.fa</span><br></pre></td></tr></table></figure>

<h3 id="使用SnpEff的build命令构建参考数据库"><a href="#使用SnpEff的build命令构建参考数据库" class="headerlink" title="使用SnpEff的build命令构建参考数据库"></a><strong>使用SnpEff的build命令构建参考数据库</strong></h3><p>使用build命令构建参考物种的数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar snpEff.jar build -gff3 -v oarv1</span><br><span class="line"></span><br><span class="line"><span class="comment">#-gff3：指明使用的是gff格式的文件</span></span><br><span class="line"><span class="comment">#不检查cds和protein文件</span></span><br><span class="line">java -jar snpEff.jar build -gff3 -c snpEff.config -v oarv1 -d -noCheckCds -noCheckProtein</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>snpEff</tag>
        <tag>注释</tag>
      </tags>
  </entry>
</search>
