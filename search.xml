<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux锁定后台进程</title>
    <url>/2024/04/29/linux%E9%94%81%E5%AE%9A%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>在 Linux 中，锁定后台进程可以确保该进程在后台运行，即使当前用户退出登录或终端会话结束。这样可以保持进程的持续运行，而不受登录状态或终端连接的影响。</p>
<h3 id="一、加“-”符号"><a href="#一、加“-”符号" class="headerlink" title="一、加“&amp;”符号"></a>一、加“&amp;”符号</h3><p>如果想让程序在后台运行，执行程序的时候，命令的最后面加“&amp;”符号。</p>
<p>执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./test.py &amp;</span><br></pre></td></tr></table></figure>

<p>查看是否在后台运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux | grep test</span><br></pre></td></tr></table></figure>

<p>后台的程序 需要关闭时，需要kill命令停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill  pid</span><br></pre></td></tr></table></figure>

<p>这种方法，查看运行日志很不方便</p>
<h3 id="二、nohup命令-权限"><a href="#二、nohup命令-权限" class="headerlink" title="二、nohup命令 (权限)"></a>二、nohup命令 (权限)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup python -u test.py &gt; test.log 2&gt;&amp;1 &amp; </span><br></pre></td></tr></table></figure>

<p>日志文件追加到文件中<br>test.log: 运行的日志，或你的文件的输出内容</p>
<p>&amp; 是一个描述符，如果1或2前不加&amp;，会被当成一个普通文件。</p>
<p>1&gt;&amp;2 意思是把标准输出重定向到标准错误.</p>
<p>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出。</p>
<p>&amp;&gt;filename 意思是把标准输出和标准错误输出都重定向到文件filename中</p>
<p>在run.py的目录默认直接生成了nohup.out文件,有些系统无法执行,权限不足时 需要加sudo</p>
<h3 id="三、screen命令"><a href="#三、screen命令" class="headerlink" title="三、screen命令"></a>三、screen命令</h3><p>Screen是一个全屏窗口管理器，</p>
<p>它在多个进程（通常是交互式shell）之间多路传输物理终端。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##### 安装screen</span><br><span class="line">yum install -y screen</span><br><span class="line">apt-get install screen</span><br><span class="line"># 创建一个新的窗口</span><br><span class="line">screen -S test</span><br><span class="line"># 进入窗口后 执行文件</span><br><span class="line">python test.py</span><br><span class="line"># 退出当前窗口</span><br><span class="line">ctrl+a+d   （方法1：保留当前窗口）</span><br><span class="line">screen -d  （方法2：保留当前窗口）</span><br><span class="line">exit       （方法3：退出程序，并关闭窗口）</span><br><span class="line"># 查看窗口</span><br><span class="line">screen -ls</span><br><span class="line"># 重新连接窗口</span><br><span class="line">screen -r id或窗口名称</span><br><span class="line"># 示例：</span><br><span class="line">screen -r test</span><br><span class="line"></span><br><span class="line">#快捷键</span><br><span class="line">Ctrl+a c ：创建窗口</span><br><span class="line">Ctrl+a w ：窗口列表</span><br><span class="line">Ctrl+a n ：下一个窗口</span><br><span class="line">Ctrl+a p ：上一个窗口</span><br><span class="line">Ctrl+a 0-9 ：在第0个窗口和第9个窗口之间切换</span><br><span class="line">Ctrl+a K(大写) ：关闭当前窗口，并且切换到下一个窗口</span><br><span class="line">exit ：关闭当前窗口，并且切换到下一个窗口</span><br><span class="line">Ctrl+a d ：退出当前终端，返回加载screen前的shell命令状态</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>study &amp; linux &amp; pid</tag>
      </tags>
  </entry>
  <entry>
    <title>non-zero-exit报错R</title>
    <url>/2024/04/29/non-zero-exit%E6%8A%A5%E9%94%99R/</url>
    <content><![CDATA[<p>在 R 安装需要软件包时，”non-zero-exit” 错误通常指示程序在执行过程中出现了非零的退出代码。这通常表示程序在某个步骤中遇到了错误或异常情况。回溯安装过程，可以发现non-zero exit status 的问题不止一种，或者说所有的安装失败，都会给出 non-zero exit status 的warning。以下列出几种可能的问题类型，或许可以按照这些办法解决掉安装失败的问题。</p>
<span id="more"></span>

<h2 id="没有编译权限看这里"><a href="#没有编译权限看这里" class="headerlink" title="没有编译权限看这里"></a>没有编译权限看这里</h2><p>有root权限安装c编译器很简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install build-essential</span><br></pre></td></tr></table></figure>

<p>无root权限安装c编译器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install gcc=12 -c conda-forge</span><br><span class="line"></span><br><span class="line">conda install gxx=12 -c conda-forge</span><br></pre></td></tr></table></figure>

<ol>
<li>ERROR: compilation failed for package</li>
</ol>
<p>经常出现在OSX中的一个问题，缺少C++ library 提供的放头文件。解决办法是安装C++或者Xcode Command Line Tools。C++的安装不必说，Xcode Command Line Tools 的安装命令为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>安装Xcode Command Line Tools 就不会在发生 compilation failed for package 的错误了。</p>
<ol start="2">
<li>Error in if (nzchar(SHLIB_LIBADD)) SHLIB_LIBADD else character() :</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">argument is of length zero</span><br></pre></td></tr></table></figure>

<p>参数缺失的报错，找到R安装目录下 R&#x2F;etc 下是否有 Makeconf 这个文件，如果没有则需要重新安装 r-base-core 包，命令为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get install r-base-core</span><br></pre></td></tr></table></figure>

<p>有时候还需要安装较高版本的libtiff，注意32bit的要安装 x86：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libtiff5-dev </span><br></pre></td></tr></table></figure>

<ol start="3">
<li>依赖包&#x2F;动态库缺失</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: dependency ‘scales’ is not available for package ‘pheatmap’</span><br></pre></td></tr></table></figure>

<p>一个的依赖包安装失败，导致其他依赖包安装失败。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Configuration failed because no mysql client library was found.</span><br></pre></td></tr></table></figure>

<p>动态库缺失，在报错信息里找到需要安装的动态库，安装即可。</p>
]]></content>
      <tags>
        <tag>study &amp; R &amp; install.packages</tag>
      </tags>
  </entry>
  <entry>
    <title>one-hot编码</title>
    <url>/2024/04/29/one-hot%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>One-hot 编码是一种将分类变量转换为二进制向量表示的编码方法。它常用于机器学习和数据分析中，特别是在处理分类特征时。在 One-hot 编码中，每个分类变量的每个可能取值都被表示为一个二进制向量的形式。这个二进制向量的长度等于分类变量的取值个数，其中只有一个元素为 1，其余元素都为 0。被编码为 1 的元素对应了分类变量的实际取值，而其他元素表示该分类变量的其他取值。</p>
<span id="more"></span>

<p>例如，假设有一个分类变量 “颜色”，可能取值为 “红色”、”蓝色” 和 “绿色”。使用 One-hot 编码时，可以将 “颜色” 变量转换为三个二进制向量，分别表示 “红色”、”蓝色” 和 “绿色”：</p>
<ul>
<li>红色：[1, 0, 0]</li>
<li>蓝色：[0, 1, 0]</li>
<li>绿色：[0, 0, 1]</li>
</ul>
<p>这样，原来的单个分类变量被转换为了多个二进制向量，每个向量代表一个分类变量取值。One-hot 编码的好处是，它能够在机器学习算法中更好地处理分类变量，避免了隐式的顺序关系，同时提供了更多的有关分类变量之间的信息。</p>
<p>在实际使用中，可以使用编程语言或库来执行 One-hot 编码，例如 Python 中的 sklearn 库的 OneHotEncoder 类。这些工具可以自动将分类变量转换为 One-hot 编码表示，以供后续的机器学习模型使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义碱基与热编码之间的映射关系</span></span><br><span class="line">base_to_hotcode = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 VCF 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;your_file.vcf&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&#x27;#&#x27;</span>):  <span class="comment"># 忽略注释行</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        fields = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        sample_name = fields[<span class="number">9</span>]  <span class="comment"># 假设样本名称在第10列</span></span><br><span class="line">        ref = fields[<span class="number">3</span>]  <span class="comment"># 参考基因组</span></span><br><span class="line">        alt = fields[<span class="number">4</span>]  <span class="comment"># 替代基因组</span></span><br><span class="line">        genotype = fields[<span class="number">8</span>]  <span class="comment"># 位点对应的基因型信息</span></span><br><span class="line">        <span class="keyword">if</span> genotype == <span class="string">&#x27;0/0&#x27;</span>:</span><br><span class="line">            hotcode = base_to_hotcode[ref]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;1/1&#x27;</span>:</span><br><span class="line">            hotcode =```python</span><br><span class="line">            base_to_hotcode[alt]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;0/1&#x27;</span>:</span><br><span class="line">            hotcode = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(base_to_hotcode[ref], base_to_hotcode[alt])]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过无效的基因型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在这里可以根据需要进行进一步操作，如将热编码保存到文件或执行其他处理</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义碱基与热编码之间的映射关系</span></span><br><span class="line">base_to_hotcode = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 VCF 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;your_file.vcf&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取样本ID</span></span><br><span class="line">sample_ids = lines[<span class="number">0</span>].strip().split(<span class="string">&#x27;\t&#x27;</span>)[<span class="number">9</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个空的 DataFrame</span></span><br><span class="line">result = pd.DataFrame()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一行数据</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fields = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        genotype = fields[<span class="number">8</span>]  <span class="comment"># 位点对应的基因型信息</span></span><br><span class="line">        ref = fields[<span class="number">3</span>]  <span class="comment"># 参考基因组</span></span><br><span class="line">        alt = fields[<span class="number">4</span>]  <span class="comment"># 替代基因组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> genotype == <span class="string">&#x27;0/0&#x27;</span>:</span><br><span class="line">            hotcode = base_to_hotcode[ref]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;1/1&#x27;</span>:</span><br><span class="line">            hotcode = base_to_hotcode[alt]</span><br><span class="line">        <span class="keyword">elif</span> genotype == <span class="string">&#x27;0/1&#x27;</span>:</span><br><span class="line">            hotcode = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(base_to_hotcode[ref], base_to_hotcode[alt])]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过无效的基因型</span></span><br><span class="line"></span><br><span class="line">        hotcode_array = np.array(hotcode)</span><br><span class="line">        data = pd.DataFrame([hotcode_array], columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>])</span><br><span class="line">        result = result.append(data, ignore_index=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 跳过格式不正确的行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将样本ID与独热编码结果合并</span></span><br><span class="line">result.insert(<span class="number">0</span>, <span class="string">&#x27;Sample_ID&#x27;</span>, sample_ids)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果到文件</span></span><br><span class="line">result.to_csv(<span class="string">&#x27;output.txt&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##creat by lx</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义字母与索引的映射关系</span></span><br><span class="line">mapping = &#123;<span class="string">&#x27;0/0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;0/1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;1/1&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义DNA序列列表</span></span><br><span class="line">sequences = [<span class="string">&#x27;0/00/11/1&#x27;</span> * <span class="number">250</span>] * <span class="number">207</span>  <span class="comment"># DNA序列长度为1000bp，共128条序列</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法一：torch.nn.functional.one_hot函数</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"> </span><br><span class="line">onehot_sequences1 = []</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">    index_sequence = [mapping[base] <span class="keyword">for</span> base <span class="keyword">in</span> sequence]</span><br><span class="line">    onehot_sequence = F.one_hot(torch.tensor(index_sequence), num_classes=<span class="number">4</span>).<span class="built_in">float</span>()</span><br><span class="line">    onehot_sequences1.append(onehot_sequence)</span><br><span class="line"> </span><br><span class="line">end_time = time.time()</span><br><span class="line">method1_time = end_time - start_time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法二：torch.eye函数</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"> </span><br><span class="line">onehot_matrix = torch.eye(<span class="number">4</span>)</span><br><span class="line">onehot_sequences2 = []</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">    index_sequence = [mapping[base] <span class="keyword">for</span> base <span class="keyword">in</span> sequence]</span><br><span class="line">    onehot_sequence = onehot_matrix[index_sequence]</span><br><span class="line">    onehot_sequences2.append(onehot_sequence)</span><br><span class="line"> </span><br><span class="line">end_time = time.time()</span><br><span class="line">method2_time = end_time - start_time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 方法三：numpy进行转换</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"> </span><br><span class="line">onehot_matrix = np.eye(<span class="number">4</span>)</span><br><span class="line">onehot_sequences3 = []</span><br><span class="line"><span class="keyword">for</span> sequence <span class="keyword">in</span> sequences:</span><br><span class="line">    index_sequence = [mapping[base] <span class="keyword">for</span> base <span class="keyword">in</span> sequence]</span><br><span class="line">    onehot_sequence = onehot_matrix[index_sequence]</span><br><span class="line">    onehot_sequences3.append(onehot_sequence)</span><br><span class="line">onehot_sequences3 = torch.from_numpy(np.array(onehot_sequences3)).<span class="built_in">float</span>()</span><br><span class="line">end_time = time.time()</span><br><span class="line">method3_time = end_time - start_time</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Method 1 time:&quot;</span>, method1_time)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Method 2 time:&quot;</span>, method2_time)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Method 3 time:&quot;</span>, method3_time)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>study &amp; ml&amp;dl  &amp; opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>vcftools计算fst选择信号</title>
    <url>/2024/04/28/vcftools%E8%AE%A1%E7%AE%97fst%E9%80%89%E6%8B%A9%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.<strong>原理</strong></h2><p>fst（F-statistics）是一种用于选择信号检测的统计方法，用于测量和比较不同群体之间的遗传差异。它可以帮助确定是否存在选择压力导致的遗传变异。通过计算不同群体之间的遗传差异（fst 值）并进行统计检验，fst 方法可以帮助检测到与自然选择相关的遗传变异。这种方法在种群遗传学、进化生物学和生态学研究中得到了广泛应用。</p>
<span id="more"></span>

<p>fst 的选择信号原理如下：</p>
<ol>
<li>遗传差异的衡量：fst 通过计算群体间和群体内的遗传差异来衡量基因组水平上的遗传变异。它使用基因频率或基因型频率作为指标来评估群体间的遗传差异。</li>
<li>群体间遗传差异：fst 使用群体间的遗传差异来测量选择信号。群体间遗传差异是指在不同群体中，相同基因座上基因型或等位基因频率的差异。如果在某个基因座上，不同群体之间的遗传差异显著高于群体内的遗传差异，可能表明该基因座受到选择的影响。</li>
<li>统计计算：fst 的计算通常基于基因频率或基因型频率的方差分析。常用的 fst 计算方法包括 Weir and Cockerham 方法、Hudson’s unbiased estimator 和 AMOVA (Analysis of Molecular Variance) 方法。这些方法使用群体间和群体内的遗传差异来计算 fst 值。</li>
<li>统计显著性检验：计算得到的 fst 值可以与理论空模型进行比较来进行统计显著性检验。常用的检验方法包括置换检验、Bootstrap 方法和模拟方法。</li>
</ol>
<p>在群体遗传学中衡量群体间的遗传分化的程度的指标有许多种，较为常见的就是遗传分化指数（Fst），fst是由F统计量演变而来，F统计量主要有三种（FIS，FIF，FST）。Fst是针对一对等位基因，如果基因座上存在复等位基因，则需要用Gst衡量，基因差异分化系数（gene differentiation coefficient，Gst）。假定有s个地方群体，第k个地方群体相对大小为wk，第k个地方群体中第i个等位基因频率为qk(i)，杂合体频率观察值为hk，那么整个群体中观察到的杂合体频率平均值HI，地方群体为理想群体的期望杂合体频率平均值HS，整个群体为理想群体的期望杂合体频率HT，分别为：</p>
<p>FIS，是HI相对于HS减少量的比值，即地方群体的平均近交系数。<br>FST，是HS相对于HT减少量的比值，即有亲缘关系地方群体间的平均近交系数。<br>FIT，是HI相对于HT减少量的比值，即整个群体的平均近交系数。<br>Fst值的取值范围是【0,1】，最大值为1表明两个群体完全分化，最小值为0表明群体间无分化。<br>在实际的研究中Fst值为0–0.05时说明群体间遗传分化很小，可以不做考虑；<br>0.05–0.15时，表明群体间存在中等程度的遗传分化；<br>0.15–0.25时群体间存在较大的遗传分化；<br>0.25以上的时候群体间就存在很大的遗传分化了。</p>
<p>目前主要使用的是vcftools来计算：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda install -c bioconda vcftools</span><br><span class="line"><span class="comment">#单点计算</span></span><br><span class="line">vcftools --vcf test.vcf --weir-fst-pop popa.txt --weir-fst-pop popb.txt --out a_b.fst</span><br><span class="line"><span class="comment">#窗口计算</span></span><br><span class="line">vcftools --vcf test.vcf --weir-fst-pop popa.txt --weir-fst-pop popa.txt --out a_b.fst --fst-window-size 150000</span><br><span class="line"><span class="comment">#滑动窗口计算</span></span><br><span class="line">vcftools --vcf test.vcf --weir-fst-pop popa.txt --weir-fst-pop popa.txt --out a_b.fst --fst-window-size 150000 --fst-window-step 75000</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2.计算"></a>2.<strong>计算</strong></h2><h3 id="2-1群体较少"><a href="#2-1群体较少" class="headerlink" title="2.1群体较少"></a>2.1<strong>群体较少</strong></h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line"><span class="comment">#crate by lx</span></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">[</span> <span class="operator">$</span><span class="comment"># -ne 6 ]; then</span></span><br><span class="line"> echo <span class="string">&quot;error.. need args&quot;</span></span><br><span class="line"> echo <span class="string">&quot;command:$0 &lt;VCF&gt; &lt;Pop1&gt; &lt;Pop2&gt; &lt;Win&gt; &lt;Step&gt; &lt;Out&gt;&quot;</span></span><br><span class="line"> exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">VCF<span class="operator">=</span><span class="operator">$</span><span class="number">1</span></span><br><span class="line">Pop1<span class="operator">=</span><span class="operator">$</span><span class="number">2</span></span><br><span class="line">Pop2<span class="operator">=</span><span class="operator">$</span><span class="number">3</span></span><br><span class="line">Win<span class="operator">=</span><span class="operator">$</span><span class="number">4</span></span><br><span class="line">Step<span class="operator">=</span><span class="operator">$</span><span class="number">5</span></span><br><span class="line">Out<span class="operator">=</span><span class="operator">$</span><span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="punctuation">[[</span> <span class="string">&quot;$&#123;file##*.&#125;&quot;</span> <span class="operator">=</span> <span class="string">&quot;vcf.gz&quot;</span> <span class="punctuation">]</span><span class="punctuation">]</span>; then</span><br><span class="line">  vcftools <span class="operator">-</span><span class="operator">-</span>gzvcf <span class="operator">$</span><span class="punctuation">&#123;</span>VCF<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop1<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop2<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>size <span class="operator">$</span><span class="punctuation">&#123;</span>Win<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>step <span class="operator">$</span><span class="punctuation">&#123;</span>Step<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>out <span class="operator">$</span><span class="punctuation">&#123;</span>Out<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span><span class="built_in">max</span><span class="operator">-</span><span class="built_in">missing</span> <span class="number">0.9</span> <span class="operator">-</span><span class="operator">-</span>maf <span class="number">0.05</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  vcftools <span class="operator">-</span><span class="operator">-</span>vcf <span class="operator">$</span><span class="punctuation">&#123;</span>VCF<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop1<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>weir<span class="operator">-</span>fst<span class="operator">-</span>pop <span class="operator">$</span><span class="punctuation">&#123;</span>Pop2<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>size <span class="operator">$</span><span class="punctuation">&#123;</span>Win<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>fst<span class="operator">-</span>window<span class="operator">-</span>step <span class="operator">$</span><span class="punctuation">&#123;</span>Step<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span>out <span class="operator">$</span><span class="punctuation">&#123;</span>Out<span class="punctuation">&#125;</span> <span class="operator">-</span><span class="operator">-</span><span class="built_in">max</span><span class="operator">-</span><span class="built_in">missing</span> <span class="number">0.9</span> <span class="operator">-</span><span class="operator">-</span>maf <span class="number">0.05</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="2-2流水线"><a href="#2-2流水线" class="headerlink" title="2.2流水线"></a>2.2<strong>流水线</strong></h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#crate by lx</span></span><br><span class="line">vcf_file=<span class="string">&quot;/home/liuxiao/1254/miss0.8.recode.vcf&quot;</span></span><br><span class="line">hu_file=<span class="string">&quot;/home/liuxiao/1254/group/group/txt/Hu.txt&quot;</span></span><br><span class="line">group_folder=<span class="string">&quot;/home/liuxiao/1254/group/group/txt/&quot;</span></span><br><span class="line">out_folder=<span class="string">&#x27;/home/liuxiao/1254/result/fst_snp/&#x27;</span></span><br><span class="line"></span><br><span class="line">txt_files=$(<span class="built_in">ls</span> <span class="string">&quot;<span class="variable">$group_folder</span>&quot;</span>/*.txt | grep -v <span class="string">&quot;Hu.txt&quot;</span>)</span><br><span class="line">pids=()</span><br><span class="line"><span class="keyword">for</span> hu_group_file <span class="keyword">in</span> <span class="variable">$hu_file</span>; <span class="keyword">do</span></span><br><span class="line">  hu_group_name=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$hu_group_file</span>&quot;</span> .txt)</span><br><span class="line">  <span class="keyword">for</span> txt_file <span class="keyword">in</span> <span class="variable">$txt_files</span>; <span class="keyword">do</span></span><br><span class="line">    group_name=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$txt_file</span>&quot;</span> .txt)</span><br><span class="line">    output_file=<span class="string">&quot;<span class="variable">$&#123;hu_group_name&#125;</span>_<span class="variable">$&#123;group_name&#125;</span>_8miss.fst&quot;</span></span><br><span class="line">    vcftools --vcf <span class="string">&quot;<span class="variable">$vcf_file</span>&quot;</span> --weir-fst-pop <span class="string">&quot;<span class="variable">$hu_group_file</span>&quot;</span> --weir-fst-pop <span class="string">&quot;<span class="variable">$txt_file</span>&quot;</span> --out <span class="string">&quot;<span class="variable">$out_folder</span>/<span class="variable">$output_file</span>&quot;</span>  &amp;</span><br><span class="line">    pids+=($!)</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pid <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;pids[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">wait</span> <span class="string">&quot;<span class="variable">$pid</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有计算完成&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>study &amp; vcftools &amp; fst</tag>
      </tags>
  </entry>
  <entry>
    <title>计算xpehh选择信号</title>
    <url>/2024/04/28/%E8%AE%A1%E7%AE%97xpehh%E9%80%89%E6%8B%A9%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.<strong>原理</strong></h2><p>xpehh (Cross Population Extended Haplotype Homozygosity) 是一种用于选择信号检测的统计方法，用于寻找遗传变异与自然选择之间的关联。它基于单核苷酸多态性（SNP）在不同群体之间的扩展单倍型同质性差异。通过计算目标群体与参考群体之间的扩展单倍型同质性差异，并进行统计检验，xpehh 方法可以帮助检测到与自然选择相关的遗传变异。这种方法在遗传学和人类进化研究中得到了广泛应用。</p>
<span id="more"></span>

<p>xpehh 的选择信号原理如下：</p>
<ol>
<li>扩展单倍型同质性：xpehh 方法使用单倍型信息来评估一个给定区域内的扩展单倍型同质性。这是指在某个区域内，多个连续的SNP共同遗传的单倍型。</li>
<li>不同群体间的比较：xpehh 方法将目标群体与参考群体进行比较。通常，目标群体是受选择的种群，而参考群体是未受选择的种群。通过比较两个群体之间的扩展单倍型同质性差异，可以检测到选择信号。</li>
<li>基于单倍型频率的计算：xpehh 方法基于单倍型频率来计算扩展单倍型同质性。它通过比较目标群体和参考群体中特定单倍型的频率差异来确定选择信号。如果某个单倍型在目标群体中频率较高，而在参考群体中频率较低，可能表明该区域存在选择。</li>
<li>统计检验：xpehh 方法使用统计检验来评估扩展单倍型同质性差异的显著性。常用的统计检验方法包括 Z 分数、标准化扩展单倍型同质性（XP-EHH）和正态近似。</li>
</ol>
<h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2.计算"></a>2.<strong>计算</strong></h2><h3 id="2-1-群体较少的情况"><a href="#2-1-群体较少的情况" class="headerlink" title="2.1.群体较少的情况"></a><strong>2.1.群体较少的情况</strong></h3><h5 id="分染色体填充数据"><a href="#分染色体填充数据" class="headerlink" title="#分染色体填充数据"></a><strong>#分染色体填充数据</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..27&#125;;<span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">java -Xms500g -Xmx500g -jar /mnt/d/lx/soft/beagle/beagle.22Jul22.46e.jar nthreads=110  gt=/mnt/d/lx/data/chr/chr<span class="variable">$i</span>.recode.vcf out=phasechr<span class="variable">$i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="XP-EHH脚本"><a href="#XP-EHH脚本" class="headerlink" title="# XP-EHH脚本"></a><strong># XP-EHH脚本</strong></h5><h5 id="调用，给出文件路径"><a href="#调用，给出文件路径" class="headerlink" title="#调用，给出文件路径"></a><strong>#调用，给出文件路径</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash selscan.sh -v /mnt/d/lx/data/vcf323/phase323vcf.vcf.gz -r /mnt/d/lx/data/grouph/group19.txt -t /mnt/d/lx/data/grouph/other.txt -w 150000 -s 75000 -T 100 -chr 27 -o new</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="编写sh"><a href="#编写sh" class="headerlink" title="#编写sh"></a><strong>#编写sh</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#create by lx</span></span><br><span class="line">selscan=<span class="string">&quot;/home/liuxiao/soft/selscan/linux/selscan&quot;</span></span><br><span class="line">norm=<span class="string">&#x27;/home/liuxiao/soft/selscan/linux/norm&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: bash <span class="variable">$0</span> --vcf &lt;vcf&gt; --ref &lt;ref&gt; --tag &lt;tag&gt; --win &lt;winsize&gt; --thread &lt;thread&gt; --output &lt;outprefix&gt;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;required options&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-v|--vcf    vcf file&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-r|--ref    ref sample per row per ID&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-t|--tag    tag sample per row per ID&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-w|--win    winsize in xpehh, default 50000&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-s|--step   stepsize in xpehh, defult 50000&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-T|--thread  threads, default 10&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-c|--chr    最大染色体号，决定你的vcf文件分多少个染色体文件&quot;</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-o|--output  输出文件前缀&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vcf=<span class="string">&quot;&quot;</span></span><br><span class="line">ref=<span class="string">&quot;&quot;</span></span><br><span class="line">tag=<span class="string">&quot;&quot;</span></span><br><span class="line">win=<span class="string">&quot;50000&quot;</span></span><br><span class="line">step=<span class="string">&quot;50000&quot;</span></span><br><span class="line">thread=<span class="string">&quot;50&quot;</span></span><br><span class="line">chr=<span class="string">&quot;&quot;</span></span><br><span class="line">output=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$#</span> -gt 0 ]];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  -v|--vcf )</span><br><span class="line"> vcf=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -r|--ref )</span><br><span class="line"> ref=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -t|--tag )</span><br><span class="line">tag=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -w|--win )</span><br><span class="line"> win=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -s|--step )</span><br><span class="line"> step=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -T|--thread )</span><br><span class="line"> thread=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -c|--chr )</span><br><span class="line">chr=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  -o|--output )</span><br><span class="line">output=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">  *) <span class="built_in">echo</span> <span class="string">&quot;输入参数不对哦!&quot;</span> &gt;&amp;2</span><br><span class="line">usage</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$vcf</span> ] || [ -z <span class="variable">$ref</span> ] || [ -z <span class="variable">$tag</span> ] || [ -z <span class="variable">$output</span> ]; <span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;检查一下这几个参数输了没 --vcf --ref --tag --output !&quot;</span> &gt;&amp;2</span><br><span class="line">  usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;    </span><br><span class="line"><span class="built_in">mkdir</span> XP-EHH.progress</span><br><span class="line">\<span class="comment"># extract sample</span></span><br><span class="line"><span class="variable">$vcftools</span> --gzvcf <span class="variable">$vcf</span> --keep <span class="variable">$ref</span> --recode --recode-INFO-all --out ./XP-EHH.progress/01.ref</span><br><span class="line"><span class="variable">$vcftools</span> --gzvcf <span class="variable">$vcf</span> --keep <span class="variable">$tag</span> --recode --recode-INFO-all --out ./XP-EHH.progress/01.tag</span><br><span class="line"><span class="built_in">cd</span> XP-EHH.progress</span><br><span class="line"><span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">\<span class="comment"># splite chr for ref and tag</span></span><br><span class="line"><span class="variable">$vcftools</span> --vcf 01.ref.recode.vcf --recode --recode-INFO-all --chr <span class="variable">$&#123;k&#125;</span> --out ref.chr<span class="variable">$&#123;k&#125;</span></span><br><span class="line"><span class="variable">$vcftools</span> --vcf 01.tag.recode.vcf --recode --recode-INFO-all --chr <span class="variable">$&#123;k&#125;</span> --out tag.chr<span class="variable">$&#123;k&#125;</span>   </span><br><span class="line">\<span class="comment"># calculate map distance         </span></span><br><span class="line"><span class="variable">$vcftools</span> --vcf ref.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --plink --out chr<span class="variable">$&#123;k&#125;</span>.MT</span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;OFS=&quot; &quot;&#125; &#123;print $1,&quot;.&quot;,$4,$4&#125;&#x27;</span> chr<span class="variable">$&#123;k&#125;</span>.MT.map &gt; chr<span class="variable">$&#123;k&#125;</span>.MT.map.distance</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">\<span class="comment"># XP-EHH</span></span><br><span class="line"><span class="variable">$selscan</span> --xpehh --vcf tag.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --vcf-ref ref.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --map chr<span class="variable">$&#123;k&#125;</span>.MT.map.distance --threads <span class="variable">$thread</span> --out  chr<span class="variable">$&#123;k&#125;</span>.ref_tag      </span><br><span class="line">\<span class="comment"># norm</span></span><br><span class="line"><span class="variable">$norm</span> --xpehh --files  chr<span class="variable">$&#123;k&#125;</span>.ref_tag.xpehh.out --bp-win --winsize <span class="variable">$win</span> </span><br><span class="line">\<span class="comment"># add win and step</span></span><br><span class="line">python ../XPEHH_Win_step.py --file chr<span class="variable">$&#123;k&#125;</span>.ref_tag.xpehh.out.norm -c <span class="variable">$k</span> --window <span class="variable">$win</span> --step <span class="variable">$step</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">cat</span> &#123;1..<span class="string">&quot;<span class="variable">$chr</span>&quot;</span>&#125;.XPEHH &gt; ../<span class="variable">$&#123;output&#125;</span>.XPEHH</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<h5 id="XPEHH-Win-step-py"><a href="#XPEHH-Win-step-py" class="headerlink" title="#XPEHH_Win_step.py"></a>#<strong>XPEHH_Win_step.py</strong></h5><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">file</span>):</span><br><span class="line">    data = pd.read_csv(file, delimiter=<span class="string">&quot;\t|\s+&quot;</span>, </span><br><span class="line">                       engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">data, step_size, window_size</span>):</span><br><span class="line">    result = []</span><br><span class="line">    chromosome_length = <span class="built_in">max</span>(data[<span class="string">&#x27;pos&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> BIN_START <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, chromosome_length, step_size):</span><br><span class="line">        BIN_END = BIN_START - <span class="number">1</span> + window_size</span><br><span class="line">        <span class="keyword">if</span> BIN_START + window_size &gt; chromosome_length:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        normxpehh_vals = []</span><br><span class="line">        <span class="keyword">for</span> _, row <span class="keyword">in</span> data[(data[<span class="string">&#x27;pos&#x27;</span>] &gt;= BIN_START) &amp; (data[<span class="string">&#x27;pos&#x27;</span>] &lt; BIN_END)].iterrows():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pd.isna(row[<span class="string">&#x27;pos&#x27;</span>]):</span><br><span class="line">                normxpehh_vals.append(row[<span class="string">&#x27;normxpehh&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算 normxpehh 的平均值并保留4位小数, 统计区间SNP数量</span></span><br><span class="line">        avg_normxpehh = <span class="number">0</span></span><br><span class="line">        nvar = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(normxpehh_vals) &gt; <span class="number">0</span>:</span><br><span class="line">            avg_normxpehh = <span class="built_in">round</span>(<span class="built_in">sum</span>(normxpehh_vals) / <span class="built_in">len</span>(normxpehh_vals), <span class="number">4</span>)</span><br><span class="line">            nvar = <span class="built_in">len</span>(normxpehh_vals)</span><br><span class="line">        result.append([BIN_START, BIN_END, </span><br><span class="line">                       avg_normxpehh, nvar])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@click.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-f&#x27;</span>,<span class="string">&#x27;--file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;xpehh.out.norm文件，norm后的位点文件，不是区间文件！！&#x27;</span>, required=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;--chr&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;染色体号，因为是分染色体做的&#x27;</span>, required=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-w&#x27;</span>,<span class="string">&#x27;--window&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;窗口大小&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">50000</span></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"><span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;--step&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;步长大小&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">50000</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">file, chromosome, window, step</span>):</span><br><span class="line">    data = load_data(file)</span><br><span class="line">    window_size = window</span><br><span class="line">    step_size = step</span><br><span class="line">    out = results(data, step_size, window_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 DataFrame 对象来保存结果，并使用 to_csv 方法将其写入文件中</span></span><br><span class="line">    result_df = pd.DataFrame(out, columns=[<span class="string">&quot;BIN_START&quot;</span>, <span class="string">&quot;BIN_END&quot;</span>, </span><br><span class="line">                                           <span class="string">&quot;avg_normxpehh&quot;</span>, <span class="string">&quot;nvar&quot;</span>])</span><br><span class="line">    result_df.loc[:, <span class="string">&#x27;CHROM&#x27;</span>] = chromosome</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> chromosome == <span class="number">1</span>:</span><br><span class="line">        result_df[[<span class="string">&quot;CHROM&quot;</span>, <span class="string">&quot;BIN_START&quot;</span>, <span class="string">&quot;BIN_END&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;nvar&quot;</span>, <span class="string">&quot;avg_normxpehh&quot;</span>]].to_csv(<span class="string">f&#x27;<span class="subst">&#123;chromosome&#125;</span>.XPEHH&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>,</span><br><span class="line">                                                    index=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result_df[[<span class="string">&quot;CHROM&quot;</span>, <span class="string">&quot;BIN_START&quot;</span>, <span class="string">&quot;BIN_END&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;nvar&quot;</span>, <span class="string">&quot;avg_normxpehh&quot;</span>]].to_csv(<span class="string">f&#x27;<span class="subst">&#123;chromosome&#125;</span>.XPEHH&#x27;</span>, sep=<span class="string">&#x27;\t&#x27;</span>,</span><br><span class="line">                                                    index=<span class="literal">False</span>, header=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="2-2多个群体计算"><a href="#2-2多个群体计算" class="headerlink" title="2.2多个群体计算"></a><strong>2.2多个群体计算</strong></h3><h5 id="自用，给出文件夹路径"><a href="#自用，给出文件夹路径" class="headerlink" title="#自用，给出文件夹路径"></a><strong>#自用，给出文件夹路径</strong></h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#create by lx</span></span><br><span class="line">selscan=<span class="string">&quot;/home/liuxiao/soft/selscan/linux/selscan&quot;</span></span><br><span class="line">norm=<span class="string">&quot;/home/liuxiao/soft/selscan/linux/norm&quot;</span></span><br><span class="line">vcftools=<span class="string">&#x27;/home/liuxiao/miniconda3/bin/vcftools&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: bash <span class="variable">$0</span> --pi &lt;vcf_folder&gt;  --win &lt;winsize&gt; --step &lt;stepsize&gt; --thread &lt;thread&gt; --output &lt;outprefix&gt;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;required options&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-pi|--pwdinput    folder containing VCF files&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-w|--win    winsize in xpehh, default 50000&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-s|--step   stepsize in xpehh, default 50000&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-t|--thread threads, default 10&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-c|--chr &quot;</span>    </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;-po|--pwdout output file prefix&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vcf_folder=<span class="string">&quot;&quot;</span></span><br><span class="line">tag=<span class="string">&quot;&quot;</span></span><br><span class="line">win=<span class="string">&quot;150000&quot;</span></span><br><span class="line">step=<span class="string">&quot;75000&quot;</span></span><br><span class="line">thread=<span class="string">&quot;60&quot;</span></span><br><span class="line">chr=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">pwd</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash *sh -pi /home/liuxiao/1254/result/vcf/  -w 150000 -s 75000 -c 27 -t 60   -po /home/liuxiao/1254/result/selscan/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [[ <span class="variable">$#</span> -gt 0 ]]; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    -pi|--pwdinput )</span><br><span class="line">      vcf_folder=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -w|--win )</span><br><span class="line">      win=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -s|--step )</span><br><span class="line">      step=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -t|--thread )</span><br><span class="line">      thread=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    -c|--chr )</span><br><span class="line">      chr=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;      </span><br><span class="line">    -po|--pwdout )</span><br><span class="line">      <span class="built_in">pwd</span>=<span class="variable">$2</span> ; <span class="built_in">shift</span> 2 ;;</span><br><span class="line">    *) <span class="built_in">echo</span> <span class="string">&quot;Invalid input parameter!&quot;</span> &gt;&amp;2</span><br><span class="line">       usage</span><br><span class="line">       <span class="built_in">shift</span></span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$vcf_folder</span> ] || [ -z <span class="variable">$pwd</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Please check if you have provided the required parameters: --pwdinput,  and --pwdoutput!&quot;</span> &gt;&amp;2</span><br><span class="line">  usage</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>() &#123;    </span><br><span class="line"><span class="keyword">for</span> vcf_file <span class="keyword">in</span> <span class="variable">$vcf_folder</span>/*.vcf.gz; </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  vcf_filename=$(<span class="built_in">basename</span> <span class="variable">$vcf_file</span>)</span><br><span class="line">  vcf_filename_no_ext=<span class="string">&quot;<span class="variable">$&#123;vcf_filename%.vcf.gz&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">mkdir</span> $<span class="built_in">pwd</span><span class="variable">$&#123;vcf_filename_no_ext&#125;</span></span><br><span class="line">  <span class="built_in">cd</span> $<span class="built_in">pwd</span><span class="variable">$&#123;vcf_filename_no_ext&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    <span class="comment"># splite chr for ref and tag</span></span><br><span class="line">    <span class="variable">$vcftools</span> --gzvcf $vcf_folder<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.vcf.gz --recode --recode-INFO-all --chr <span class="variable">$&#123;k&#125;</span> --out  <span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.chr<span class="variable">$&#123;k&#125;</span> &amp;</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span></span><br><span class="line">    <span class="keyword">for</span> ((k=<span class="number">1</span>; k&lt;=<span class="variable">$chr</span>; k++));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    <span class="variable">$selscan</span> --xpehh --vcf /home/liuxiao/1254/result/selscan/hu/Hu.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --vcf-ref  <span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.chr<span class="variable">$&#123;k&#125;</span>.recode.vcf --map /home/liuxiao/1254/result/vcf/map/chr<span class="variable">$&#123;k&#125;</span>.MT.map.distance --threads <span class="variable">$thread</span> --out  chr<span class="variable">$&#123;k&#125;</span>.<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>      </span><br><span class="line"></span><br><span class="line">    <span class="variable">$norm</span> --xpehh --files  chr<span class="variable">$&#123;k&#125;</span>.<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.xpehh.out --bp-win --winsize <span class="variable">$win</span> </span><br><span class="line"></span><br><span class="line">    python /home/liuxiao/1254/result/selscan/XPEHH_Win_step.py --file chr<span class="variable">$&#123;k&#125;</span>.<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.xpehh.out.norm -c <span class="variable">$k</span> --window <span class="variable">$win</span> --step <span class="variable">$step</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">cat</span> *.XPEHH &gt; /home/liuxiao/1254/result/selscan/<span class="variable">$&#123;vcf_filename_no_ext&#125;</span>.XPEHH</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure>

<h5 id="python脚本同上"><a href="#python脚本同上" class="headerlink" title="python脚本同上"></a><strong>python脚本同上</strong></h5>]]></content>
      <tags>
        <tag>study &amp; selscan &amp; xpehh</tag>
      </tags>
  </entry>
</search>
